/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from "graphql";
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  userData: GQLUserDataRoot;
  userPresentation: GQLUserPresentationRoot;
}

export interface GQLUserDataRoot {
  getFullUserInformation: GQLFullUserInformationResponse;
}

export interface GQLFullUserInformationResponse {
  user: GQLUser;
  userData: GQLUserData;
  statusCode: number;
}

export interface GQLUser {
  id: string;
  email: string;
  firstName?: string;
  lastName?: string;
  lastLogin: GQLDate;
  createdAt: GQLDate;
  updatedAt: GQLDate;
}

export type GQLDate = any;

export interface GQLUserData {
  id: string;
  userId: string;
  phoneNumber?: string;
  emailCv?: string;
  citySv?: string;
  cityEn?: string;
  countrySv?: string;
  countryEn?: string;
  profileImage?: string;
  profileImagePublicId?: string;
  updatedAt: GQLDate;
  createdAt: GQLDate;
}

export interface GQLUserPresentationRoot {
  getUserPresentation: GQLUserPresentationResponse;
}

export interface GQLUserPresentationResponse {
  userPresentation: GQLUserPresentation;
  statusCode: number;
}

export interface GQLUserPresentation {
  id: string;
  userId: string;
  presentationSv?: string;
  presentationEn?: string;
  createdAt: GQLDate;
  updatedAt: GQLDate;
}

export interface GQLMutation {
  authentication: GQLAuthenticationMutationRoot;
  userData: GQLUserDataMutationRoot;
  userPresentation: GQLUserPresentationMutationRoot;
  workExperience: GQLWorkExperienceMutationRoot;
}

export interface GQLAuthenticationMutationRoot {
  refreshToken: GQLTokenResponse;
  registerUser: GQLGeneralResponse;
  loginUser: GQLTokenResponse;
  logoutUser: GQLGeneralResponse;
  changeEmail: GQLGeneralResponse;
  changePassword: GQLGeneralResponse;
}

export interface GQLRefreshTokenInput {
  accessToken: string;
  refreshToken: string;
}

export interface GQLTokenResponse {
  statusCode: number;
  accessToken: string;
  refreshToken: string;
}

export interface GQLRegisterInput {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
}

export interface GQLGeneralResponse {
  statusCode: number;
  message: string;
}

export interface GQLLoginInput {
  email: string;
  password: string;
}

export interface GQLChangeEmailInput {
  newEmail: string;
  password: string;
}

export interface GQLChangePasswordInput {
  oldPassword: string;
  newPassword: string;
}

export interface GQLUserDataMutationRoot {
  updateUserData: GQLUserUpdateResponse;
}

export interface GQLUserDataInput {
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  emailCv?: string;
  citySv?: string;
  cityEn?: string;
  countrySv?: string;
  countryEn?: string;
}

export interface GQLUserUpdateResponse {
  id: string;
  userId: string;
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  emailCv?: string;
  citySv?: string;
  cityEn?: string;
  countrySv?: string;
  countryEn?: string;
  profileImage?: string;
  profileImagePublicId?: string;
  createdAt: GQLDate;
  updatedAt: GQLDate;
  statusCode: number;
}

export interface GQLUserPresentationMutationRoot {
  updateUserPresentation: GQLUserPresentationResponse;
}

export interface GQLUserPresentationInput {
  id: string;
  presentationSv?: string;
  presentationEn?: string;
}

export interface GQLWorkExperienceMutationRoot {
  createWorkExperience: GQLCreateWorkExperienceResponse;
  updateWorkExperience: GQLUpdateWorkExperienceResponse;
}

export interface GQLWorkExperienceInput {
  employmentRate: string;
  companyName: string;
  roleSv: string;
  roleEn: string;
  descriptionSv: string;
  descriptionEn: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted: GQLDate;
  dateEnded: GQLDate;
}

export interface GQLCreateWorkExperienceResponse {
  workExperienceId: string;
  statusCode: number;
}

export interface GQLUpdateWorkExperienceInput {
  workExperienceId: string;
  employmentRate: string;
  companyName: string;
  roleSv: string;
  roleEn: string;
  descriptionSv: string;
  descriptionEn: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted: GQLDate;
  dateEnded: GQLDate;
}

export interface GQLUpdateWorkExperienceResponse {
  workExperience: GQLUpdateWorkExperienceDataResponse;
}

export interface GQLUpdateWorkExperienceDataResponse {
  id: string;
  userId: string;
  employmentRate: string;
  companyName: string;
  roleSv: string;
  roleEn: string;
  descriptionSv: string;
  descriptionEn: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted: GQLDate;
  dateEnded: GQLDate;
  createdAt: GQLDate;
  updatedAt: GQLDate;
}

export type GQLVoid = any;

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  UserDataRoot?: GQLUserDataRootTypeResolver;
  FullUserInformationResponse?: GQLFullUserInformationResponseTypeResolver;
  User?: GQLUserTypeResolver;
  Date?: GraphQLScalarType;
  UserData?: GQLUserDataTypeResolver;
  UserPresentationRoot?: GQLUserPresentationRootTypeResolver;
  UserPresentationResponse?: GQLUserPresentationResponseTypeResolver;
  UserPresentation?: GQLUserPresentationTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  AuthenticationMutationRoot?: GQLAuthenticationMutationRootTypeResolver;
  TokenResponse?: GQLTokenResponseTypeResolver;
  GeneralResponse?: GQLGeneralResponseTypeResolver;
  UserDataMutationRoot?: GQLUserDataMutationRootTypeResolver;
  UserUpdateResponse?: GQLUserUpdateResponseTypeResolver;
  UserPresentationMutationRoot?: GQLUserPresentationMutationRootTypeResolver;
  WorkExperienceMutationRoot?: GQLWorkExperienceMutationRootTypeResolver;
  CreateWorkExperienceResponse?: GQLCreateWorkExperienceResponseTypeResolver;
  UpdateWorkExperienceResponse?: GQLUpdateWorkExperienceResponseTypeResolver;
  UpdateWorkExperienceDataResponse?: GQLUpdateWorkExperienceDataResponseTypeResolver;
  Void?: GraphQLScalarType;
}
export interface GQLQueryTypeResolver<TParent = undefined> {
  userData?: QueryToUserDataResolver<TParent>;
  userPresentation?: QueryToUserPresentationResolver<TParent>;
}

export interface QueryToUserDataResolver<
  TParent = undefined,
  TResult = GQLUserDataRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface QueryToUserPresentationResolver<
  TParent = undefined,
  TResult = GQLUserPresentationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserDataRootTypeResolver<TParent = GQLUserDataRoot> {
  getFullUserInformation?: UserDataRootToGetFullUserInformationResolver<TParent>;
}

export interface UserDataRootToGetFullUserInformationResolver<
  TParent = GQLUserDataRoot,
  TResult = GQLFullUserInformationResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLFullUserInformationResponseTypeResolver<
  TParent = GQLFullUserInformationResponse
> {
  user?: FullUserInformationResponseToUserResolver<TParent>;
  userData?: FullUserInformationResponseToUserDataResolver<TParent>;
  statusCode?: FullUserInformationResponseToStatusCodeResolver<TParent>;
}

export interface FullUserInformationResponseToUserResolver<
  TParent = GQLFullUserInformationResponse,
  TResult = GQLUser
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationResponseToUserDataResolver<
  TParent = GQLFullUserInformationResponse,
  TResult = GQLUserData
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationResponseToStatusCodeResolver<
  TParent = GQLFullUserInformationResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserTypeResolver<TParent = GQLUser> {
  id?: UserToIdResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  firstName?: UserToFirstNameResolver<TParent>;
  lastName?: UserToLastNameResolver<TParent>;
  lastLogin?: UserToLastLoginResolver<TParent>;
  createdAt?: UserToCreatedAtResolver<TParent>;
  updatedAt?: UserToUpdatedAtResolver<TParent>;
}

export interface UserToIdResolver<TParent = GQLUser, TResult = string> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToEmailResolver<TParent = GQLUser, TResult = string> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToFirstNameResolver<
  TParent = GQLUser,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToLastNameResolver<
  TParent = GQLUser,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToLastLoginResolver<TParent = GQLUser, TResult = GQLDate> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToCreatedAtResolver<TParent = GQLUser, TResult = GQLDate> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToUpdatedAtResolver<TParent = GQLUser, TResult = GQLDate> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserDataTypeResolver<TParent = GQLUserData> {
  id?: UserDataToIdResolver<TParent>;
  userId?: UserDataToUserIdResolver<TParent>;
  phoneNumber?: UserDataToPhoneNumberResolver<TParent>;
  emailCv?: UserDataToEmailCvResolver<TParent>;
  citySv?: UserDataToCitySvResolver<TParent>;
  cityEn?: UserDataToCityEnResolver<TParent>;
  countrySv?: UserDataToCountrySvResolver<TParent>;
  countryEn?: UserDataToCountryEnResolver<TParent>;
  profileImage?: UserDataToProfileImageResolver<TParent>;
  profileImagePublicId?: UserDataToProfileImagePublicIdResolver<TParent>;
  updatedAt?: UserDataToUpdatedAtResolver<TParent>;
  createdAt?: UserDataToCreatedAtResolver<TParent>;
}

export interface UserDataToIdResolver<TParent = GQLUserData, TResult = string> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToUserIdResolver<
  TParent = GQLUserData,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToPhoneNumberResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToEmailCvResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToCitySvResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToCityEnResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToCountrySvResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToCountryEnResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToProfileImageResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToProfileImagePublicIdResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToUpdatedAtResolver<
  TParent = GQLUserData,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToCreatedAtResolver<
  TParent = GQLUserData,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserPresentationRootTypeResolver<
  TParent = GQLUserPresentationRoot
> {
  getUserPresentation?: UserPresentationRootToGetUserPresentationResolver<TParent>;
}

export interface UserPresentationRootToGetUserPresentationResolver<
  TParent = GQLUserPresentationRoot,
  TResult = GQLUserPresentationResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserPresentationResponseTypeResolver<
  TParent = GQLUserPresentationResponse
> {
  userPresentation?: UserPresentationResponseToUserPresentationResolver<TParent>;
  statusCode?: UserPresentationResponseToStatusCodeResolver<TParent>;
}

export interface UserPresentationResponseToUserPresentationResolver<
  TParent = GQLUserPresentationResponse,
  TResult = GQLUserPresentation
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationResponseToStatusCodeResolver<
  TParent = GQLUserPresentationResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserPresentationTypeResolver<
  TParent = GQLUserPresentation
> {
  id?: UserPresentationToIdResolver<TParent>;
  userId?: UserPresentationToUserIdResolver<TParent>;
  presentationSv?: UserPresentationToPresentationSvResolver<TParent>;
  presentationEn?: UserPresentationToPresentationEnResolver<TParent>;
  createdAt?: UserPresentationToCreatedAtResolver<TParent>;
  updatedAt?: UserPresentationToUpdatedAtResolver<TParent>;
}

export interface UserPresentationToIdResolver<
  TParent = GQLUserPresentation,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationToUserIdResolver<
  TParent = GQLUserPresentation,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationToPresentationSvResolver<
  TParent = GQLUserPresentation,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationToPresentationEnResolver<
  TParent = GQLUserPresentation,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationToCreatedAtResolver<
  TParent = GQLUserPresentation,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationToUpdatedAtResolver<
  TParent = GQLUserPresentation,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLMutationTypeResolver<TParent = undefined> {
  authentication?: MutationToAuthenticationResolver<TParent>;
  userData?: MutationToUserDataResolver<TParent>;
  userPresentation?: MutationToUserPresentationResolver<TParent>;
  workExperience?: MutationToWorkExperienceResolver<TParent>;
}

export interface MutationToAuthenticationResolver<
  TParent = undefined,
  TResult = GQLAuthenticationMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToUserDataResolver<
  TParent = undefined,
  TResult = GQLUserDataMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToUserPresentationResolver<
  TParent = undefined,
  TResult = GQLUserPresentationMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToWorkExperienceResolver<
  TParent = undefined,
  TResult = GQLWorkExperienceMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLAuthenticationMutationRootTypeResolver<
  TParent = GQLAuthenticationMutationRoot
> {
  refreshToken?: AuthenticationMutationRootToRefreshTokenResolver<TParent>;
  registerUser?: AuthenticationMutationRootToRegisterUserResolver<TParent>;
  loginUser?: AuthenticationMutationRootToLoginUserResolver<TParent>;
  logoutUser?: AuthenticationMutationRootToLogoutUserResolver<TParent>;
  changeEmail?: AuthenticationMutationRootToChangeEmailResolver<TParent>;
  changePassword?: AuthenticationMutationRootToChangePasswordResolver<TParent>;
}

export interface AuthenticationMutationRootToRefreshTokenArgs {
  input?: GQLRefreshTokenInput;
}
export interface AuthenticationMutationRootToRefreshTokenResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLTokenResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToRefreshTokenArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToRegisterUserArgs {
  input?: GQLRegisterInput;
}
export interface AuthenticationMutationRootToRegisterUserResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToRegisterUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToLoginUserArgs {
  input?: GQLLoginInput;
}
export interface AuthenticationMutationRootToLoginUserResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLTokenResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToLoginUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToLogoutUserResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToChangeEmailArgs {
  input?: GQLChangeEmailInput;
}
export interface AuthenticationMutationRootToChangeEmailResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToChangeEmailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToChangePasswordArgs {
  input?: GQLChangePasswordInput;
}
export interface AuthenticationMutationRootToChangePasswordResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToChangePasswordArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLTokenResponseTypeResolver<TParent = GQLTokenResponse> {
  statusCode?: TokenResponseToStatusCodeResolver<TParent>;
  accessToken?: TokenResponseToAccessTokenResolver<TParent>;
  refreshToken?: TokenResponseToRefreshTokenResolver<TParent>;
}

export interface TokenResponseToStatusCodeResolver<
  TParent = GQLTokenResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface TokenResponseToAccessTokenResolver<
  TParent = GQLTokenResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface TokenResponseToRefreshTokenResolver<
  TParent = GQLTokenResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGeneralResponseTypeResolver<TParent = GQLGeneralResponse> {
  statusCode?: GeneralResponseToStatusCodeResolver<TParent>;
  message?: GeneralResponseToMessageResolver<TParent>;
}

export interface GeneralResponseToStatusCodeResolver<
  TParent = GQLGeneralResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GeneralResponseToMessageResolver<
  TParent = GQLGeneralResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserDataMutationRootTypeResolver<
  TParent = GQLUserDataMutationRoot
> {
  updateUserData?: UserDataMutationRootToUpdateUserDataResolver<TParent>;
}

export interface UserDataMutationRootToUpdateUserDataArgs {
  input?: GQLUserDataInput;
}
export interface UserDataMutationRootToUpdateUserDataResolver<
  TParent = GQLUserDataMutationRoot,
  TResult = GQLUserUpdateResponse
> {
  (
    parent: TParent,
    args: UserDataMutationRootToUpdateUserDataArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserUpdateResponseTypeResolver<
  TParent = GQLUserUpdateResponse
> {
  id?: UserUpdateResponseToIdResolver<TParent>;
  userId?: UserUpdateResponseToUserIdResolver<TParent>;
  firstName?: UserUpdateResponseToFirstNameResolver<TParent>;
  lastName?: UserUpdateResponseToLastNameResolver<TParent>;
  phoneNumber?: UserUpdateResponseToPhoneNumberResolver<TParent>;
  emailCv?: UserUpdateResponseToEmailCvResolver<TParent>;
  citySv?: UserUpdateResponseToCitySvResolver<TParent>;
  cityEn?: UserUpdateResponseToCityEnResolver<TParent>;
  countrySv?: UserUpdateResponseToCountrySvResolver<TParent>;
  countryEn?: UserUpdateResponseToCountryEnResolver<TParent>;
  profileImage?: UserUpdateResponseToProfileImageResolver<TParent>;
  profileImagePublicId?: UserUpdateResponseToProfileImagePublicIdResolver<TParent>;
  createdAt?: UserUpdateResponseToCreatedAtResolver<TParent>;
  updatedAt?: UserUpdateResponseToUpdatedAtResolver<TParent>;
  statusCode?: UserUpdateResponseToStatusCodeResolver<TParent>;
}

export interface UserUpdateResponseToIdResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToUserIdResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToFirstNameResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToLastNameResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToPhoneNumberResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToEmailCvResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToCitySvResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToCityEnResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToCountrySvResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToCountryEnResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToProfileImageResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToProfileImagePublicIdResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToCreatedAtResolver<
  TParent = GQLUserUpdateResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToUpdatedAtResolver<
  TParent = GQLUserUpdateResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToStatusCodeResolver<
  TParent = GQLUserUpdateResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserPresentationMutationRootTypeResolver<
  TParent = GQLUserPresentationMutationRoot
> {
  updateUserPresentation?: UserPresentationMutationRootToUpdateUserPresentationResolver<TParent>;
}

export interface UserPresentationMutationRootToUpdateUserPresentationArgs {
  input?: GQLUserPresentationInput;
}
export interface UserPresentationMutationRootToUpdateUserPresentationResolver<
  TParent = GQLUserPresentationMutationRoot,
  TResult = GQLUserPresentationResponse
> {
  (
    parent: TParent,
    args: UserPresentationMutationRootToUpdateUserPresentationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLWorkExperienceMutationRootTypeResolver<
  TParent = GQLWorkExperienceMutationRoot
> {
  createWorkExperience?: WorkExperienceMutationRootToCreateWorkExperienceResolver<TParent>;
  updateWorkExperience?: WorkExperienceMutationRootToUpdateWorkExperienceResolver<TParent>;
}

export interface WorkExperienceMutationRootToCreateWorkExperienceArgs {
  input?: GQLWorkExperienceInput;
}
export interface WorkExperienceMutationRootToCreateWorkExperienceResolver<
  TParent = GQLWorkExperienceMutationRoot,
  TResult = GQLCreateWorkExperienceResponse
> {
  (
    parent: TParent,
    args: WorkExperienceMutationRootToCreateWorkExperienceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceMutationRootToUpdateWorkExperienceArgs {
  input?: GQLUpdateWorkExperienceInput;
}
export interface WorkExperienceMutationRootToUpdateWorkExperienceResolver<
  TParent = GQLWorkExperienceMutationRoot,
  TResult = GQLUpdateWorkExperienceResponse
> {
  (
    parent: TParent,
    args: WorkExperienceMutationRootToUpdateWorkExperienceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCreateWorkExperienceResponseTypeResolver<
  TParent = GQLCreateWorkExperienceResponse
> {
  workExperienceId?: CreateWorkExperienceResponseToWorkExperienceIdResolver<TParent>;
  statusCode?: CreateWorkExperienceResponseToStatusCodeResolver<TParent>;
}

export interface CreateWorkExperienceResponseToWorkExperienceIdResolver<
  TParent = GQLCreateWorkExperienceResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CreateWorkExperienceResponseToStatusCodeResolver<
  TParent = GQLCreateWorkExperienceResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUpdateWorkExperienceResponseTypeResolver<
  TParent = GQLUpdateWorkExperienceResponse
> {
  workExperience?: UpdateWorkExperienceResponseToWorkExperienceResolver<TParent>;
}

export interface UpdateWorkExperienceResponseToWorkExperienceResolver<
  TParent = GQLUpdateWorkExperienceResponse,
  TResult = GQLUpdateWorkExperienceDataResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUpdateWorkExperienceDataResponseTypeResolver<
  TParent = GQLUpdateWorkExperienceDataResponse
> {
  id?: UpdateWorkExperienceDataResponseToIdResolver<TParent>;
  userId?: UpdateWorkExperienceDataResponseToUserIdResolver<TParent>;
  employmentRate?: UpdateWorkExperienceDataResponseToEmploymentRateResolver<TParent>;
  companyName?: UpdateWorkExperienceDataResponseToCompanyNameResolver<TParent>;
  roleSv?: UpdateWorkExperienceDataResponseToRoleSvResolver<TParent>;
  roleEn?: UpdateWorkExperienceDataResponseToRoleEnResolver<TParent>;
  descriptionSv?: UpdateWorkExperienceDataResponseToDescriptionSvResolver<TParent>;
  descriptionEn?: UpdateWorkExperienceDataResponseToDescriptionEnResolver<TParent>;
  citySv?: UpdateWorkExperienceDataResponseToCitySvResolver<TParent>;
  cityEn?: UpdateWorkExperienceDataResponseToCityEnResolver<TParent>;
  countrySv?: UpdateWorkExperienceDataResponseToCountrySvResolver<TParent>;
  countryEn?: UpdateWorkExperienceDataResponseToCountryEnResolver<TParent>;
  dateStarted?: UpdateWorkExperienceDataResponseToDateStartedResolver<TParent>;
  dateEnded?: UpdateWorkExperienceDataResponseToDateEndedResolver<TParent>;
  createdAt?: UpdateWorkExperienceDataResponseToCreatedAtResolver<TParent>;
  updatedAt?: UpdateWorkExperienceDataResponseToUpdatedAtResolver<TParent>;
}

export interface UpdateWorkExperienceDataResponseToIdResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToUserIdResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToEmploymentRateResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToCompanyNameResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToRoleSvResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToRoleEnResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToDescriptionSvResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToDescriptionEnResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToCitySvResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToCityEnResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToCountrySvResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToCountryEnResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToDateStartedResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToDateEndedResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToCreatedAtResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateWorkExperienceDataResponseToUpdatedAtResolver<
  TParent = GQLUpdateWorkExperienceDataResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}
