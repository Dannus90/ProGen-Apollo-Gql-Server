/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from "graphql";
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  authentication: GQLAuthenticationRoot;
}

export interface GQLAuthenticationRoot {
  authentication: string;
}

export interface GQLMutation {
  authentication: GQLAuthenticationMutationRoot;
}

export interface GQLAuthenticationMutationRoot {
  getRefreshToken: GQLTokenResponse;
  registerUser?: boolean;
  loginUser: GQLTokenResponse;
  logoutUser?: boolean;
}

export interface GQLRefreshTokenInput {
  accessToken: string;
  refreshToken: string;
}

export interface GQLTokenResponse {
  accessToken: string;
  refreshToken: string;
}

export interface GQLRegisterLoginInput {
  email: string;
  password: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  AuthenticationRoot?: GQLAuthenticationRootTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  AuthenticationMutationRoot?: GQLAuthenticationMutationRootTypeResolver;
  TokenResponse?: GQLTokenResponseTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = undefined> {
  authentication?: QueryToAuthenticationResolver<TParent>;
}

export interface QueryToAuthenticationResolver<
  TParent = undefined,
  TResult = GQLAuthenticationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLAuthenticationRootTypeResolver<
  TParent = GQLAuthenticationRoot
> {
  authentication?: AuthenticationRootToAuthenticationResolver<TParent>;
}

export interface AuthenticationRootToAuthenticationResolver<
  TParent = GQLAuthenticationRoot,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLMutationTypeResolver<TParent = undefined> {
  authentication?: MutationToAuthenticationResolver<TParent>;
}

export interface MutationToAuthenticationResolver<
  TParent = undefined,
  TResult = GQLAuthenticationMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLAuthenticationMutationRootTypeResolver<
  TParent = GQLAuthenticationMutationRoot
> {
  getRefreshToken?: AuthenticationMutationRootToGetRefreshTokenResolver<TParent>;
  registerUser?: AuthenticationMutationRootToRegisterUserResolver<TParent>;
  loginUser?: AuthenticationMutationRootToLoginUserResolver<TParent>;
  logoutUser?: AuthenticationMutationRootToLogoutUserResolver<TParent>;
}

export interface AuthenticationMutationRootToGetRefreshTokenArgs {
  input?: GQLRefreshTokenInput;
}
export interface AuthenticationMutationRootToGetRefreshTokenResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLTokenResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToGetRefreshTokenArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToRegisterUserArgs {
  input?: GQLRegisterLoginInput;
}
export interface AuthenticationMutationRootToRegisterUserResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = boolean | null
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToRegisterUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToLoginUserArgs {
  input?: GQLRegisterLoginInput;
}
export interface AuthenticationMutationRootToLoginUserResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLTokenResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToLoginUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToLogoutUserResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = boolean | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLTokenResponseTypeResolver<TParent = GQLTokenResponse> {
  accessToken?: TokenResponseToAccessTokenResolver<TParent>;
  refreshToken?: TokenResponseToRefreshTokenResolver<TParent>;
}

export interface TokenResponseToAccessTokenResolver<
  TParent = GQLTokenResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface TokenResponseToRefreshTokenResolver<
  TParent = GQLTokenResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}
