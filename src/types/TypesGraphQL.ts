/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from "graphql";
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  userData: GQLUserDataRoot;
  userPresentation: GQLUserPresentationRoot;
  workExperience: GQLWorkExperienceRoot;
  education: GQLEducationRoot;
  otherInformation: GQLOtherInformationRoot;
  language: GQLLanguageRoot;
  fullCvInformation: GQLFullCvInformationRoot;
  certificate: GQLCertificateRoot;
  skill: GQLSkillRoot;
  userSkill: GQLUserSkillRoot;
}

export interface GQLUserDataRoot {
  getFullUserInformation: GQLFullUserInformationResponse;
}

export interface GQLFullUserInformationResponse {
  user: GQLUser;
  userData: GQLUserData;
  statusCode: number;
}

export interface GQLUser {
  id: string;
  email: string;
  firstName?: string;
  lastName?: string;
  lastLogin: GQLDate;
  createdAt: GQLDate;
  updatedAt: GQLDate;
}

export type GQLDate = any;

export interface GQLUserData {
  id: string;
  userId: string;
  phoneNumber?: string;
  emailCv?: string;
  citySv?: string;
  cityEn?: string;
  countrySv?: string;
  countryEn?: string;
  addressZipCode?: string;
  profileImage?: string;
  profileImagePublicId?: string;
  workTitleSv?: string;
  workTitleEn?: string;
  updatedAt: GQLDate;
  createdAt: GQLDate;
}

export interface GQLUserPresentationRoot {
  getUserPresentation: GQLUserPresentationResponse;
}

export interface GQLUserPresentationResponse {
  userPresentation: GQLUserPresentation;
  statusCode: number;
}

export interface GQLUserPresentation {
  id: string;
  userId: string;
  presentationSv?: string;
  presentationEn?: string;
  createdAt: GQLDate;
  updatedAt: GQLDate;
}

export interface GQLWorkExperienceRoot {
  getWorkExperience: GQLGetUpdateWorkExperienceResponse;
  getWorkExperiences: GQLGetWorkExperiencesResponse;
}

export interface GQLGetWorkExperienceInput {
  workExperienceId: string;
}

export interface GQLGetUpdateWorkExperienceResponse {
  workExperience: GQLGetAndUpdateWorkExperienceDataResponse;
}

export interface GQLGetAndUpdateWorkExperienceDataResponse {
  id: string;
  userId: string;
  employmentRate: string;
  companyName: string;
  roleSv: string;
  roleEn: string;
  descriptionSv: string;
  descriptionEn: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted?: GQLDate;
  dateEnded?: GQLDate;
  createdAt: GQLDate;
  updatedAt: GQLDate;
  statusCode: number;
}

export interface GQLGetWorkExperiencesResponse {
  statusCode: number;
  workExperiences?: Array<GQLGetWorkExperiencesDataResponse | null>;
}

export interface GQLGetWorkExperiencesDataResponse {
  id: string;
  userId: string;
  employmentRate: string;
  companyName: string;
  roleSv: string;
  roleEn: string;
  descriptionSv: string;
  descriptionEn: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted?: GQLDate;
  dateEnded?: GQLDate;
  createdAt: GQLDate;
  updatedAt: GQLDate;
}

export interface GQLEducationRoot {
  getEducation: GQLGetEducationResponse;
  getEducations: GQLGetEducationsResponse;
}

export interface GQLGetEducationInput {
  educationId: string;
}

export interface GQLGetEducationResponse {
  statusCode: number;
  education: GQLGetEducationDataResponse;
}

export interface GQLGetEducationDataResponse {
  id: string;
  userId: string;
  educationNameSv: string;
  educationNameEn: string;
  examNameSv: string;
  examNameEn: string;
  subjectAreaSv: string;
  subjectAreaEn: string;
  descriptionSv: string;
  descriptionEn: string;
  grade: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted?: GQLDate;
  dateEnded?: GQLDate;
  createdAt: GQLDate;
  updatedAt: GQLDate;
}

export interface GQLGetEducationsResponse {
  statusCode: number;
  educations?: Array<GQLGetEducationDataResponse | null>;
}

export interface GQLOtherInformationRoot {
  getOtherInformation: GQLOtherInformationResponse;
}

export interface GQLOtherInformationResponse {
  otherInformation: GQLOtherInformation;
  statusCode: number;
}

export interface GQLOtherInformation {
  id: string;
  userId: string;
  drivingLicenseSv?: string;
  drivingLicenseEn?: string;
  createdAt: GQLDate;
  updatedAt: GQLDate;
}

export interface GQLLanguageRoot {
  getLanguage: GQLLanguageResponse;
  getLanguages: GQLLanguagesResponse;
}

export interface GQLGetLanguageInput {
  languageId: string;
}

export interface GQLLanguageResponse {
  language: GQLLanguage;
  statusCode: number;
}

export interface GQLLanguage {
  id: string;
  userId: string;
  languageSv: string;
  languageEn: string;
}

export interface GQLLanguagesResponse {
  languages: Array<GQLLanguage | null>;
  statusCode: number;
}

export interface GQLFullCvInformationRoot {
  getFullCvInformation: GQLGetFullCvInformationResponse;
}

export interface GQLGetFullCvInformationResponse {
  fullUserInformation: GQLFullUserInformationFullCv;
  otherInformation: GQLOtherInformationFullCv;
  educations: Array<GQLEducationFullCv | null>;
  workExperiences: Array<GQLWorkExperienceFullCv | null>;
  languages: Array<GQLLanguageFullCv | null>;
  userPresentation: GQLUserPresentationFullCv;
}

export interface GQLFullUserInformationFullCv {
  id: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  emailCv: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  addressZipCode: string;
  profileImage: string;
  workTitleSv: string;
  workTitleEn: string;
}

export interface GQLOtherInformationFullCv {
  drivingLicenseSv: string;
  drivingLicenseEn: string;
}

export interface GQLEducationFullCv {
  educationNameSv: string;
  educationNameEn: string;
  examNameSv: string;
  examNameEn: string;
  subjectAreaSv: string;
  subjectAreaEn: string;
  descriptionSv: string;
  descriptionEn: string;
  grade: string;
  citySv: string;
  cityEn: string;
  countryEn: string;
  countrySv: string;
  dateStarted?: GQLDate;
  dateEnded?: GQLDate;
}

export interface GQLWorkExperienceFullCv {
  employmentRate: string;
  companyName: string;
  roleSv: string;
  roleEn: string;
  descriptionSv: string;
  descriptionEn: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted?: GQLDate;
  dateEnded?: GQLDate;
}

export interface GQLLanguageFullCv {
  languageSv: string;
  languageEn: string;
}

export interface GQLUserPresentationFullCv {
  presentationSv: string;
  presentationEn: string;
}

export interface GQLCertificateRoot {
  getCertificate: GQLCertificateResponse;
  getCertificates: GQLCertificatesResponse;
}

export interface GQLGetCertificateInput {
  certificateId: string;
}

export interface GQLCertificateResponse {
  id: string;
  userId: string;
  certificateNameSv: string;
  certificateNameEn: string;
  organisation: string;
  identificationId: string;
  referenceAddress: string;
  dateIssued: GQLDate;
  updatedAt: GQLDate;
  createdAt: GQLDate;
  statusCode: number;
}

export interface GQLCertificatesResponse {
  certificate: Array<GQLCertificate | null>;
  statusCode: number;
}

export interface GQLCertificate {
  id: string;
  userId: string;
  certificateNameSv: string;
  certificateNameEn: string;
  organisation: string;
  identificationId: string;
  referenceAddress: string;
  dateIssued: GQLDate;
  updatedAt: GQLDate;
  createdAt: GQLDate;
}

export interface GQLSkillRoot {
  getSkills: GQLGetSkillsResponse;
}

export interface GQLGetSkillsResponse {
  statusCode: number;
  skills: Array<GQLSkill | null>;
}

export interface GQLSkill {
  id: string;
  skillName: string;
}

export interface GQLUserSkillRoot {
  getUserSkills: GQLGetUserSkillsResponse;
  getUserSkill: GQLGetUserSkillResponse;
}

export interface GQLGetUserSkillsResponse {
  statusCode: number;
  userSkills: Array<GQLUserSkill | null>;
}

export interface GQLUserSkill {
  skill: GQLSkillModel;
  userSkill: GQLUserSkillModel;
}

export interface GQLSkillModel {
  id: string;
  skillName: string;
}

export interface GQLUserSkillModel {
  id: string;
  userId: string;
  skillId: string;
  skillLevel: number;
}

export interface GQLGetUserSkillInput {
  userSkillId: string;
}

export interface GQLGetUserSkillResponse {
  statusCode: number;
  userSkill?: GQLUserSkill;
}

export interface GQLMutation {
  authentication: GQLAuthenticationMutationRoot;
  userData: GQLUserDataMutationRoot;
  userPresentation: GQLUserPresentationMutationRoot;
  workExperience: GQLWorkExperienceMutationRoot;
  education: GQLEducationMutationRoot;
  otherInformation: GQLOtherInformationMutationRoot;
  language: GQLLanguageMutationRoot;
  certificate: GQLCertificateMutationRoot;
  skill: GQLSkillMutationRoot;
  userSkill: GQLUserSkillMutationRoot;
}

export interface GQLAuthenticationMutationRoot {
  refreshToken: GQLTokenResponse;
  registerUser: GQLGeneralResponse;
  loginUser: GQLTokenResponse;
  logoutUser: GQLGeneralResponse;
  changeEmail: GQLGeneralResponse;
  changePassword: GQLGeneralResponse;
  deleteAccount: GQLGeneralResponse;
  requestPasswordResetByEmail: GQLGeneralResponse;
  resetPasswordByToken: GQLGeneralResponse;
}

export interface GQLRefreshTokenInput {
  accessToken: string;
  refreshToken: string;
}

export interface GQLTokenResponse {
  statusCode: number;
  accessToken: string;
  refreshToken: string;
}

export interface GQLRegisterInput {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
}

export interface GQLGeneralResponse {
  statusCode: number;
  message: string;
}

export interface GQLLoginInput {
  email: string;
  password: string;
}

export interface GQLChangeEmailInput {
  newEmail: string;
  password: string;
}

export interface GQLChangePasswordInput {
  oldPassword: string;
  newPassword: string;
}

export interface GQLDeleteAccountInput {
  password: string;
}

export interface GQLRequestPasswordResetByEmailInput {
  email: string;
}

export interface GQLResetPasswordByTokenInput {
  password: string;
  token: string;
}

export interface GQLUserDataMutationRoot {
  updateUserData: GQLUserUpdateResponse;
}

export interface GQLUserDataInput {
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  emailCv?: string;
  citySv?: string;
  cityEn?: string;
  countrySv?: string;
  countryEn?: string;
  addressZipCode?: string;
  workTitleSv?: string;
  workTitleEn?: string;
}

export interface GQLUserUpdateResponse {
  id: string;
  userId: string;
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  emailCv?: string;
  citySv?: string;
  cityEn?: string;
  countrySv?: string;
  countryEn?: string;
  addressZipCode?: string;
  profileImage?: string;
  profileImagePublicId?: string;
  workTitleSv?: string;
  workTitleEn?: string;
  createdAt: GQLDate;
  updatedAt: GQLDate;
  statusCode: number;
}

export interface GQLUserPresentationMutationRoot {
  updateUserPresentation: GQLUserPresentationResponse;
}

export interface GQLUserPresentationInput {
  id: string;
  presentationSv?: string;
  presentationEn?: string;
}

export interface GQLWorkExperienceMutationRoot {
  createWorkExperience: GQLCreateWorkExperienceResponse;
  updateWorkExperience: GQLGetUpdateWorkExperienceResponse;
  deleteWorkExperience: GQLDeleteWorkExperienceResponse;
}

export interface GQLWorkExperienceInput {
  employmentRate: string;
  companyName: string;
  roleSv: string;
  roleEn: string;
  descriptionSv: string;
  descriptionEn: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted?: GQLDate;
  dateEnded?: GQLDate;
}

export interface GQLCreateWorkExperienceResponse {
  workExperienceId: string;
  statusCode: number;
}

export interface GQLUpdateWorkExperienceInput {
  workExperienceId: string;
  employmentRate: string;
  companyName: string;
  roleSv: string;
  roleEn: string;
  descriptionSv: string;
  descriptionEn: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted?: GQLDate;
  dateEnded?: GQLDate;
}

export interface GQLDeleteWorkExperienceInput {
  workExperienceId: string;
}

export interface GQLDeleteWorkExperienceResponse {
  workExperienceId: string;
  statusCode: number;
}

export interface GQLEducationMutationRoot {
  createEducation: GQLCreateEducationResponse;
  updateEducation: GQLUpdateEducationResponse;
  deleteEducation: GQLDeleteEducationResponse;
}

export interface GQLCreateEducationInput {
  educationNameSv: string;
  educationNameEn: string;
  examNameSv: string;
  examNameEn: string;
  subjectAreaSv: string;
  subjectAreaEn: string;
  descriptionSv: string;
  descriptionEn: string;
  grade: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted?: GQLDate;
  dateEnded?: GQLDate;
}

export interface GQLCreateEducationResponse {
  educationId: string;
  statusCode: number;
}

export interface GQLUpdateEducationInput {
  educationId: string;
  educationNameSv: string;
  educationNameEn: string;
  examNameSv: string;
  examNameEn: string;
  subjectAreaSv: string;
  subjectAreaEn: string;
  descriptionSv: string;
  descriptionEn: string;
  grade: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted?: GQLDate;
  dateEnded?: GQLDate;
}

export interface GQLUpdateEducationResponse {
  statusCode: number;
  education: GQLEducationResponse;
}

export interface GQLEducationResponse {
  id: string;
  userId: string;
  educationNameSv: string;
  educationNameEn: string;
  examNameSv: string;
  examNameEn: string;
  subjectAreaSv: string;
  subjectAreaEn: string;
  descriptionSv: string;
  descriptionEn: string;
  grade: string;
  citySv: string;
  cityEn: string;
  countrySv: string;
  countryEn: string;
  dateStarted?: GQLDate;
  dateEnded?: GQLDate;
}

export interface GQLDeleteEducationInput {
  educationId: string;
}

export interface GQLDeleteEducationResponse {
  educationId: string;
  statusCode: number;
}

export interface GQLOtherInformationMutationRoot {
  updateOtherInformation: GQLOtherInformationResponse;
}

export interface GQLOtherInformationInput {
  drivingLicenseSv: string;
  drivingLicenseEn: string;
}

export interface GQLLanguageMutationRoot {
  createLanguage: GQLLanguageIdResponse;
  updateLanguage: GQLLanguageIdResponse;
  deleteLanguage: GQLLanguageIdResponse;
}

export interface GQLLanguageInput {
  languageSv: string;
  languageEn: string;
}

export interface GQLLanguageIdResponse {
  languageId: string;
  statusCode: number;
}

export interface GQLUpdateLanguageInput {
  languageId: string;
  languageSv: string;
  languageEn: string;
}

export interface GQLDeleteLanguageInput {
  languageId: string;
}

export interface GQLCertificateMutationRoot {
  createCertificate: GQLCreateCertificateResponse;
  updateCertificate: GQLCertificateResponse;
  deleteCertificate: GQLDeleteCertificateResponse;
}

export interface GQLCreateCertificateInput {
  certificateNameSv: string;
  certificateNameEn: string;
  organisation: string;
  identificationId: string;
  referenceAddress: string;
  dateIssued?: GQLDate;
}

export interface GQLCreateCertificateResponse {
  certificateId: string;
  statusCode: number;
}

export interface GQLUpdateCertificateInput {
  certificateId: string;
  certificateNameSv: string;
  certificateNameEn: string;
  organisation: string;
  identificationId: string;
  referenceAddress: string;
  dateIssued?: GQLDate;
}

export interface GQLDeleteCertificateInput {
  certificateId: string;
}

export interface GQLDeleteCertificateResponse {
  message: string;
  statusCode: number;
}

export interface GQLSkillMutationRoot {
  createSkill: GQLCreateSkillResponse;
  deleteSkill: GQLDeleteSkillResponse;
}

export interface GQLCreateSkillInput {
  skillName: string;
}

export interface GQLCreateSkillResponse {
  skillId: string;
  statusCode: number;
}

export interface GQLDeleteSkillInput {
  skillId: string;
}

export interface GQLDeleteSkillResponse {
  message: string;
  statusCode: number;
}

export interface GQLUserSkillMutationRoot {
  createUserSkill: GQLCreateUserSkillResponse;
}

export interface GQLCreateUserSkillInput {
  skillId: string;
  skillLevel: number;
}

export interface GQLCreateUserSkillResponse {
  userSkillId: string;
  statusCode: number;
}

export type GQLVoid = any;

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  UserDataRoot?: GQLUserDataRootTypeResolver;
  FullUserInformationResponse?: GQLFullUserInformationResponseTypeResolver;
  User?: GQLUserTypeResolver;
  Date?: GraphQLScalarType;
  UserData?: GQLUserDataTypeResolver;
  UserPresentationRoot?: GQLUserPresentationRootTypeResolver;
  UserPresentationResponse?: GQLUserPresentationResponseTypeResolver;
  UserPresentation?: GQLUserPresentationTypeResolver;
  WorkExperienceRoot?: GQLWorkExperienceRootTypeResolver;
  GetUpdateWorkExperienceResponse?: GQLGetUpdateWorkExperienceResponseTypeResolver;
  GetAndUpdateWorkExperienceDataResponse?: GQLGetAndUpdateWorkExperienceDataResponseTypeResolver;
  GetWorkExperiencesResponse?: GQLGetWorkExperiencesResponseTypeResolver;
  GetWorkExperiencesDataResponse?: GQLGetWorkExperiencesDataResponseTypeResolver;
  EducationRoot?: GQLEducationRootTypeResolver;
  GetEducationResponse?: GQLGetEducationResponseTypeResolver;
  GetEducationDataResponse?: GQLGetEducationDataResponseTypeResolver;
  GetEducationsResponse?: GQLGetEducationsResponseTypeResolver;
  OtherInformationRoot?: GQLOtherInformationRootTypeResolver;
  OtherInformationResponse?: GQLOtherInformationResponseTypeResolver;
  OtherInformation?: GQLOtherInformationTypeResolver;
  LanguageRoot?: GQLLanguageRootTypeResolver;
  LanguageResponse?: GQLLanguageResponseTypeResolver;
  Language?: GQLLanguageTypeResolver;
  LanguagesResponse?: GQLLanguagesResponseTypeResolver;
  FullCvInformationRoot?: GQLFullCvInformationRootTypeResolver;
  GetFullCvInformationResponse?: GQLGetFullCvInformationResponseTypeResolver;
  FullUserInformationFullCv?: GQLFullUserInformationFullCvTypeResolver;
  OtherInformationFullCv?: GQLOtherInformationFullCvTypeResolver;
  EducationFullCv?: GQLEducationFullCvTypeResolver;
  WorkExperienceFullCv?: GQLWorkExperienceFullCvTypeResolver;
  LanguageFullCv?: GQLLanguageFullCvTypeResolver;
  UserPresentationFullCv?: GQLUserPresentationFullCvTypeResolver;
  CertificateRoot?: GQLCertificateRootTypeResolver;
  CertificateResponse?: GQLCertificateResponseTypeResolver;
  CertificatesResponse?: GQLCertificatesResponseTypeResolver;
  Certificate?: GQLCertificateTypeResolver;
  SkillRoot?: GQLSkillRootTypeResolver;
  GetSkillsResponse?: GQLGetSkillsResponseTypeResolver;
  Skill?: GQLSkillTypeResolver;
  UserSkillRoot?: GQLUserSkillRootTypeResolver;
  GetUserSkillsResponse?: GQLGetUserSkillsResponseTypeResolver;
  UserSkill?: GQLUserSkillTypeResolver;
  SkillModel?: GQLSkillModelTypeResolver;
  UserSkillModel?: GQLUserSkillModelTypeResolver;
  GetUserSkillResponse?: GQLGetUserSkillResponseTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  AuthenticationMutationRoot?: GQLAuthenticationMutationRootTypeResolver;
  TokenResponse?: GQLTokenResponseTypeResolver;
  GeneralResponse?: GQLGeneralResponseTypeResolver;
  UserDataMutationRoot?: GQLUserDataMutationRootTypeResolver;
  UserUpdateResponse?: GQLUserUpdateResponseTypeResolver;
  UserPresentationMutationRoot?: GQLUserPresentationMutationRootTypeResolver;
  WorkExperienceMutationRoot?: GQLWorkExperienceMutationRootTypeResolver;
  CreateWorkExperienceResponse?: GQLCreateWorkExperienceResponseTypeResolver;
  DeleteWorkExperienceResponse?: GQLDeleteWorkExperienceResponseTypeResolver;
  EducationMutationRoot?: GQLEducationMutationRootTypeResolver;
  CreateEducationResponse?: GQLCreateEducationResponseTypeResolver;
  UpdateEducationResponse?: GQLUpdateEducationResponseTypeResolver;
  EducationResponse?: GQLEducationResponseTypeResolver;
  DeleteEducationResponse?: GQLDeleteEducationResponseTypeResolver;
  OtherInformationMutationRoot?: GQLOtherInformationMutationRootTypeResolver;
  LanguageMutationRoot?: GQLLanguageMutationRootTypeResolver;
  LanguageIdResponse?: GQLLanguageIdResponseTypeResolver;
  CertificateMutationRoot?: GQLCertificateMutationRootTypeResolver;
  CreateCertificateResponse?: GQLCreateCertificateResponseTypeResolver;
  DeleteCertificateResponse?: GQLDeleteCertificateResponseTypeResolver;
  SkillMutationRoot?: GQLSkillMutationRootTypeResolver;
  CreateSkillResponse?: GQLCreateSkillResponseTypeResolver;
  DeleteSkillResponse?: GQLDeleteSkillResponseTypeResolver;
  UserSkillMutationRoot?: GQLUserSkillMutationRootTypeResolver;
  CreateUserSkillResponse?: GQLCreateUserSkillResponseTypeResolver;
  Void?: GraphQLScalarType;
}
export interface GQLQueryTypeResolver<TParent = undefined> {
  userData?: QueryToUserDataResolver<TParent>;
  userPresentation?: QueryToUserPresentationResolver<TParent>;
  workExperience?: QueryToWorkExperienceResolver<TParent>;
  education?: QueryToEducationResolver<TParent>;
  otherInformation?: QueryToOtherInformationResolver<TParent>;
  language?: QueryToLanguageResolver<TParent>;
  fullCvInformation?: QueryToFullCvInformationResolver<TParent>;
  certificate?: QueryToCertificateResolver<TParent>;
  skill?: QueryToSkillResolver<TParent>;
  userSkill?: QueryToUserSkillResolver<TParent>;
}

export interface QueryToUserDataResolver<
  TParent = undefined,
  TResult = GQLUserDataRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface QueryToUserPresentationResolver<
  TParent = undefined,
  TResult = GQLUserPresentationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface QueryToWorkExperienceResolver<
  TParent = undefined,
  TResult = GQLWorkExperienceRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface QueryToEducationResolver<
  TParent = undefined,
  TResult = GQLEducationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface QueryToOtherInformationResolver<
  TParent = undefined,
  TResult = GQLOtherInformationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface QueryToLanguageResolver<
  TParent = undefined,
  TResult = GQLLanguageRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface QueryToFullCvInformationResolver<
  TParent = undefined,
  TResult = GQLFullCvInformationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface QueryToCertificateResolver<
  TParent = undefined,
  TResult = GQLCertificateRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface QueryToSkillResolver<
  TParent = undefined,
  TResult = GQLSkillRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface QueryToUserSkillResolver<
  TParent = undefined,
  TResult = GQLUserSkillRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserDataRootTypeResolver<TParent = GQLUserDataRoot> {
  getFullUserInformation?: UserDataRootToGetFullUserInformationResolver<TParent>;
}

export interface UserDataRootToGetFullUserInformationResolver<
  TParent = GQLUserDataRoot,
  TResult = GQLFullUserInformationResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLFullUserInformationResponseTypeResolver<
  TParent = GQLFullUserInformationResponse
> {
  user?: FullUserInformationResponseToUserResolver<TParent>;
  userData?: FullUserInformationResponseToUserDataResolver<TParent>;
  statusCode?: FullUserInformationResponseToStatusCodeResolver<TParent>;
}

export interface FullUserInformationResponseToUserResolver<
  TParent = GQLFullUserInformationResponse,
  TResult = GQLUser
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationResponseToUserDataResolver<
  TParent = GQLFullUserInformationResponse,
  TResult = GQLUserData
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationResponseToStatusCodeResolver<
  TParent = GQLFullUserInformationResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserTypeResolver<TParent = GQLUser> {
  id?: UserToIdResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  firstName?: UserToFirstNameResolver<TParent>;
  lastName?: UserToLastNameResolver<TParent>;
  lastLogin?: UserToLastLoginResolver<TParent>;
  createdAt?: UserToCreatedAtResolver<TParent>;
  updatedAt?: UserToUpdatedAtResolver<TParent>;
}

export interface UserToIdResolver<TParent = GQLUser, TResult = string> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToEmailResolver<TParent = GQLUser, TResult = string> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToFirstNameResolver<
  TParent = GQLUser,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToLastNameResolver<
  TParent = GQLUser,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToLastLoginResolver<TParent = GQLUser, TResult = GQLDate> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToCreatedAtResolver<TParent = GQLUser, TResult = GQLDate> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserToUpdatedAtResolver<TParent = GQLUser, TResult = GQLDate> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserDataTypeResolver<TParent = GQLUserData> {
  id?: UserDataToIdResolver<TParent>;
  userId?: UserDataToUserIdResolver<TParent>;
  phoneNumber?: UserDataToPhoneNumberResolver<TParent>;
  emailCv?: UserDataToEmailCvResolver<TParent>;
  citySv?: UserDataToCitySvResolver<TParent>;
  cityEn?: UserDataToCityEnResolver<TParent>;
  countrySv?: UserDataToCountrySvResolver<TParent>;
  countryEn?: UserDataToCountryEnResolver<TParent>;
  addressZipCode?: UserDataToAddressZipCodeResolver<TParent>;
  profileImage?: UserDataToProfileImageResolver<TParent>;
  profileImagePublicId?: UserDataToProfileImagePublicIdResolver<TParent>;
  workTitleSv?: UserDataToWorkTitleSvResolver<TParent>;
  workTitleEn?: UserDataToWorkTitleEnResolver<TParent>;
  updatedAt?: UserDataToUpdatedAtResolver<TParent>;
  createdAt?: UserDataToCreatedAtResolver<TParent>;
}

export interface UserDataToIdResolver<TParent = GQLUserData, TResult = string> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToUserIdResolver<
  TParent = GQLUserData,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToPhoneNumberResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToEmailCvResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToCitySvResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToCityEnResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToCountrySvResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToCountryEnResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToAddressZipCodeResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToProfileImageResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToProfileImagePublicIdResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToWorkTitleSvResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToWorkTitleEnResolver<
  TParent = GQLUserData,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToUpdatedAtResolver<
  TParent = GQLUserData,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserDataToCreatedAtResolver<
  TParent = GQLUserData,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserPresentationRootTypeResolver<
  TParent = GQLUserPresentationRoot
> {
  getUserPresentation?: UserPresentationRootToGetUserPresentationResolver<TParent>;
}

export interface UserPresentationRootToGetUserPresentationResolver<
  TParent = GQLUserPresentationRoot,
  TResult = GQLUserPresentationResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserPresentationResponseTypeResolver<
  TParent = GQLUserPresentationResponse
> {
  userPresentation?: UserPresentationResponseToUserPresentationResolver<TParent>;
  statusCode?: UserPresentationResponseToStatusCodeResolver<TParent>;
}

export interface UserPresentationResponseToUserPresentationResolver<
  TParent = GQLUserPresentationResponse,
  TResult = GQLUserPresentation
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationResponseToStatusCodeResolver<
  TParent = GQLUserPresentationResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserPresentationTypeResolver<
  TParent = GQLUserPresentation
> {
  id?: UserPresentationToIdResolver<TParent>;
  userId?: UserPresentationToUserIdResolver<TParent>;
  presentationSv?: UserPresentationToPresentationSvResolver<TParent>;
  presentationEn?: UserPresentationToPresentationEnResolver<TParent>;
  createdAt?: UserPresentationToCreatedAtResolver<TParent>;
  updatedAt?: UserPresentationToUpdatedAtResolver<TParent>;
}

export interface UserPresentationToIdResolver<
  TParent = GQLUserPresentation,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationToUserIdResolver<
  TParent = GQLUserPresentation,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationToPresentationSvResolver<
  TParent = GQLUserPresentation,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationToPresentationEnResolver<
  TParent = GQLUserPresentation,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationToCreatedAtResolver<
  TParent = GQLUserPresentation,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationToUpdatedAtResolver<
  TParent = GQLUserPresentation,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLWorkExperienceRootTypeResolver<
  TParent = GQLWorkExperienceRoot
> {
  getWorkExperience?: WorkExperienceRootToGetWorkExperienceResolver<TParent>;
  getWorkExperiences?: WorkExperienceRootToGetWorkExperiencesResolver<TParent>;
}

export interface WorkExperienceRootToGetWorkExperienceArgs {
  input?: GQLGetWorkExperienceInput;
}
export interface WorkExperienceRootToGetWorkExperienceResolver<
  TParent = GQLWorkExperienceRoot,
  TResult = GQLGetUpdateWorkExperienceResponse
> {
  (
    parent: TParent,
    args: WorkExperienceRootToGetWorkExperienceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceRootToGetWorkExperiencesResolver<
  TParent = GQLWorkExperienceRoot,
  TResult = GQLGetWorkExperiencesResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetUpdateWorkExperienceResponseTypeResolver<
  TParent = GQLGetUpdateWorkExperienceResponse
> {
  workExperience?: GetUpdateWorkExperienceResponseToWorkExperienceResolver<TParent>;
}

export interface GetUpdateWorkExperienceResponseToWorkExperienceResolver<
  TParent = GQLGetUpdateWorkExperienceResponse,
  TResult = GQLGetAndUpdateWorkExperienceDataResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetAndUpdateWorkExperienceDataResponseTypeResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse
> {
  id?: GetAndUpdateWorkExperienceDataResponseToIdResolver<TParent>;
  userId?: GetAndUpdateWorkExperienceDataResponseToUserIdResolver<TParent>;
  employmentRate?: GetAndUpdateWorkExperienceDataResponseToEmploymentRateResolver<TParent>;
  companyName?: GetAndUpdateWorkExperienceDataResponseToCompanyNameResolver<TParent>;
  roleSv?: GetAndUpdateWorkExperienceDataResponseToRoleSvResolver<TParent>;
  roleEn?: GetAndUpdateWorkExperienceDataResponseToRoleEnResolver<TParent>;
  descriptionSv?: GetAndUpdateWorkExperienceDataResponseToDescriptionSvResolver<TParent>;
  descriptionEn?: GetAndUpdateWorkExperienceDataResponseToDescriptionEnResolver<TParent>;
  citySv?: GetAndUpdateWorkExperienceDataResponseToCitySvResolver<TParent>;
  cityEn?: GetAndUpdateWorkExperienceDataResponseToCityEnResolver<TParent>;
  countrySv?: GetAndUpdateWorkExperienceDataResponseToCountrySvResolver<TParent>;
  countryEn?: GetAndUpdateWorkExperienceDataResponseToCountryEnResolver<TParent>;
  dateStarted?: GetAndUpdateWorkExperienceDataResponseToDateStartedResolver<TParent>;
  dateEnded?: GetAndUpdateWorkExperienceDataResponseToDateEndedResolver<TParent>;
  createdAt?: GetAndUpdateWorkExperienceDataResponseToCreatedAtResolver<TParent>;
  updatedAt?: GetAndUpdateWorkExperienceDataResponseToUpdatedAtResolver<TParent>;
  statusCode?: GetAndUpdateWorkExperienceDataResponseToStatusCodeResolver<TParent>;
}

export interface GetAndUpdateWorkExperienceDataResponseToIdResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToUserIdResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToEmploymentRateResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToCompanyNameResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToRoleSvResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToRoleEnResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToDescriptionSvResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToDescriptionEnResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToCitySvResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToCityEnResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToCountrySvResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToCountryEnResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToDateStartedResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToDateEndedResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToCreatedAtResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToUpdatedAtResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetAndUpdateWorkExperienceDataResponseToStatusCodeResolver<
  TParent = GQLGetAndUpdateWorkExperienceDataResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetWorkExperiencesResponseTypeResolver<
  TParent = GQLGetWorkExperiencesResponse
> {
  statusCode?: GetWorkExperiencesResponseToStatusCodeResolver<TParent>;
  workExperiences?: GetWorkExperiencesResponseToWorkExperiencesResolver<TParent>;
}

export interface GetWorkExperiencesResponseToStatusCodeResolver<
  TParent = GQLGetWorkExperiencesResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesResponseToWorkExperiencesResolver<
  TParent = GQLGetWorkExperiencesResponse,
  TResult = Array<GQLGetWorkExperiencesDataResponse | null> | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetWorkExperiencesDataResponseTypeResolver<
  TParent = GQLGetWorkExperiencesDataResponse
> {
  id?: GetWorkExperiencesDataResponseToIdResolver<TParent>;
  userId?: GetWorkExperiencesDataResponseToUserIdResolver<TParent>;
  employmentRate?: GetWorkExperiencesDataResponseToEmploymentRateResolver<TParent>;
  companyName?: GetWorkExperiencesDataResponseToCompanyNameResolver<TParent>;
  roleSv?: GetWorkExperiencesDataResponseToRoleSvResolver<TParent>;
  roleEn?: GetWorkExperiencesDataResponseToRoleEnResolver<TParent>;
  descriptionSv?: GetWorkExperiencesDataResponseToDescriptionSvResolver<TParent>;
  descriptionEn?: GetWorkExperiencesDataResponseToDescriptionEnResolver<TParent>;
  citySv?: GetWorkExperiencesDataResponseToCitySvResolver<TParent>;
  cityEn?: GetWorkExperiencesDataResponseToCityEnResolver<TParent>;
  countrySv?: GetWorkExperiencesDataResponseToCountrySvResolver<TParent>;
  countryEn?: GetWorkExperiencesDataResponseToCountryEnResolver<TParent>;
  dateStarted?: GetWorkExperiencesDataResponseToDateStartedResolver<TParent>;
  dateEnded?: GetWorkExperiencesDataResponseToDateEndedResolver<TParent>;
  createdAt?: GetWorkExperiencesDataResponseToCreatedAtResolver<TParent>;
  updatedAt?: GetWorkExperiencesDataResponseToUpdatedAtResolver<TParent>;
}

export interface GetWorkExperiencesDataResponseToIdResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToUserIdResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToEmploymentRateResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToCompanyNameResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToRoleSvResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToRoleEnResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToDescriptionSvResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToDescriptionEnResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToCitySvResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToCityEnResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToCountrySvResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToCountryEnResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToDateStartedResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToDateEndedResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToCreatedAtResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetWorkExperiencesDataResponseToUpdatedAtResolver<
  TParent = GQLGetWorkExperiencesDataResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLEducationRootTypeResolver<TParent = GQLEducationRoot> {
  getEducation?: EducationRootToGetEducationResolver<TParent>;
  getEducations?: EducationRootToGetEducationsResolver<TParent>;
}

export interface EducationRootToGetEducationArgs {
  input: GQLGetEducationInput;
}
export interface EducationRootToGetEducationResolver<
  TParent = GQLEducationRoot,
  TResult = GQLGetEducationResponse
> {
  (
    parent: TParent,
    args: EducationRootToGetEducationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationRootToGetEducationsResolver<
  TParent = GQLEducationRoot,
  TResult = GQLGetEducationsResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetEducationResponseTypeResolver<
  TParent = GQLGetEducationResponse
> {
  statusCode?: GetEducationResponseToStatusCodeResolver<TParent>;
  education?: GetEducationResponseToEducationResolver<TParent>;
}

export interface GetEducationResponseToStatusCodeResolver<
  TParent = GQLGetEducationResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationResponseToEducationResolver<
  TParent = GQLGetEducationResponse,
  TResult = GQLGetEducationDataResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetEducationDataResponseTypeResolver<
  TParent = GQLGetEducationDataResponse
> {
  id?: GetEducationDataResponseToIdResolver<TParent>;
  userId?: GetEducationDataResponseToUserIdResolver<TParent>;
  educationNameSv?: GetEducationDataResponseToEducationNameSvResolver<TParent>;
  educationNameEn?: GetEducationDataResponseToEducationNameEnResolver<TParent>;
  examNameSv?: GetEducationDataResponseToExamNameSvResolver<TParent>;
  examNameEn?: GetEducationDataResponseToExamNameEnResolver<TParent>;
  subjectAreaSv?: GetEducationDataResponseToSubjectAreaSvResolver<TParent>;
  subjectAreaEn?: GetEducationDataResponseToSubjectAreaEnResolver<TParent>;
  descriptionSv?: GetEducationDataResponseToDescriptionSvResolver<TParent>;
  descriptionEn?: GetEducationDataResponseToDescriptionEnResolver<TParent>;
  grade?: GetEducationDataResponseToGradeResolver<TParent>;
  citySv?: GetEducationDataResponseToCitySvResolver<TParent>;
  cityEn?: GetEducationDataResponseToCityEnResolver<TParent>;
  countrySv?: GetEducationDataResponseToCountrySvResolver<TParent>;
  countryEn?: GetEducationDataResponseToCountryEnResolver<TParent>;
  dateStarted?: GetEducationDataResponseToDateStartedResolver<TParent>;
  dateEnded?: GetEducationDataResponseToDateEndedResolver<TParent>;
  createdAt?: GetEducationDataResponseToCreatedAtResolver<TParent>;
  updatedAt?: GetEducationDataResponseToUpdatedAtResolver<TParent>;
}

export interface GetEducationDataResponseToIdResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToUserIdResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToEducationNameSvResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToEducationNameEnResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToExamNameSvResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToExamNameEnResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToSubjectAreaSvResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToSubjectAreaEnResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToDescriptionSvResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToDescriptionEnResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToGradeResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToCitySvResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToCityEnResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToCountrySvResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToCountryEnResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToDateStartedResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToDateEndedResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToCreatedAtResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationDataResponseToUpdatedAtResolver<
  TParent = GQLGetEducationDataResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetEducationsResponseTypeResolver<
  TParent = GQLGetEducationsResponse
> {
  statusCode?: GetEducationsResponseToStatusCodeResolver<TParent>;
  educations?: GetEducationsResponseToEducationsResolver<TParent>;
}

export interface GetEducationsResponseToStatusCodeResolver<
  TParent = GQLGetEducationsResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetEducationsResponseToEducationsResolver<
  TParent = GQLGetEducationsResponse,
  TResult = Array<GQLGetEducationDataResponse | null> | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLOtherInformationRootTypeResolver<
  TParent = GQLOtherInformationRoot
> {
  getOtherInformation?: OtherInformationRootToGetOtherInformationResolver<TParent>;
}

export interface OtherInformationRootToGetOtherInformationResolver<
  TParent = GQLOtherInformationRoot,
  TResult = GQLOtherInformationResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLOtherInformationResponseTypeResolver<
  TParent = GQLOtherInformationResponse
> {
  otherInformation?: OtherInformationResponseToOtherInformationResolver<TParent>;
  statusCode?: OtherInformationResponseToStatusCodeResolver<TParent>;
}

export interface OtherInformationResponseToOtherInformationResolver<
  TParent = GQLOtherInformationResponse,
  TResult = GQLOtherInformation
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface OtherInformationResponseToStatusCodeResolver<
  TParent = GQLOtherInformationResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLOtherInformationTypeResolver<
  TParent = GQLOtherInformation
> {
  id?: OtherInformationToIdResolver<TParent>;
  userId?: OtherInformationToUserIdResolver<TParent>;
  drivingLicenseSv?: OtherInformationToDrivingLicenseSvResolver<TParent>;
  drivingLicenseEn?: OtherInformationToDrivingLicenseEnResolver<TParent>;
  createdAt?: OtherInformationToCreatedAtResolver<TParent>;
  updatedAt?: OtherInformationToUpdatedAtResolver<TParent>;
}

export interface OtherInformationToIdResolver<
  TParent = GQLOtherInformation,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface OtherInformationToUserIdResolver<
  TParent = GQLOtherInformation,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface OtherInformationToDrivingLicenseSvResolver<
  TParent = GQLOtherInformation,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface OtherInformationToDrivingLicenseEnResolver<
  TParent = GQLOtherInformation,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface OtherInformationToCreatedAtResolver<
  TParent = GQLOtherInformation,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface OtherInformationToUpdatedAtResolver<
  TParent = GQLOtherInformation,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLLanguageRootTypeResolver<TParent = GQLLanguageRoot> {
  getLanguage?: LanguageRootToGetLanguageResolver<TParent>;
  getLanguages?: LanguageRootToGetLanguagesResolver<TParent>;
}

export interface LanguageRootToGetLanguageArgs {
  input: GQLGetLanguageInput;
}
export interface LanguageRootToGetLanguageResolver<
  TParent = GQLLanguageRoot,
  TResult = GQLLanguageResponse
> {
  (
    parent: TParent,
    args: LanguageRootToGetLanguageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface LanguageRootToGetLanguagesResolver<
  TParent = GQLLanguageRoot,
  TResult = GQLLanguagesResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLLanguageResponseTypeResolver<
  TParent = GQLLanguageResponse
> {
  language?: LanguageResponseToLanguageResolver<TParent>;
  statusCode?: LanguageResponseToStatusCodeResolver<TParent>;
}

export interface LanguageResponseToLanguageResolver<
  TParent = GQLLanguageResponse,
  TResult = GQLLanguage
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface LanguageResponseToStatusCodeResolver<
  TParent = GQLLanguageResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLLanguageTypeResolver<TParent = GQLLanguage> {
  id?: LanguageToIdResolver<TParent>;
  userId?: LanguageToUserIdResolver<TParent>;
  languageSv?: LanguageToLanguageSvResolver<TParent>;
  languageEn?: LanguageToLanguageEnResolver<TParent>;
}

export interface LanguageToIdResolver<TParent = GQLLanguage, TResult = string> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface LanguageToUserIdResolver<
  TParent = GQLLanguage,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface LanguageToLanguageSvResolver<
  TParent = GQLLanguage,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface LanguageToLanguageEnResolver<
  TParent = GQLLanguage,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLLanguagesResponseTypeResolver<
  TParent = GQLLanguagesResponse
> {
  languages?: LanguagesResponseToLanguagesResolver<TParent>;
  statusCode?: LanguagesResponseToStatusCodeResolver<TParent>;
}

export interface LanguagesResponseToLanguagesResolver<
  TParent = GQLLanguagesResponse,
  TResult = Array<GQLLanguage | null>
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface LanguagesResponseToStatusCodeResolver<
  TParent = GQLLanguagesResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLFullCvInformationRootTypeResolver<
  TParent = GQLFullCvInformationRoot
> {
  getFullCvInformation?: FullCvInformationRootToGetFullCvInformationResolver<TParent>;
}

export interface FullCvInformationRootToGetFullCvInformationResolver<
  TParent = GQLFullCvInformationRoot,
  TResult = GQLGetFullCvInformationResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetFullCvInformationResponseTypeResolver<
  TParent = GQLGetFullCvInformationResponse
> {
  fullUserInformation?: GetFullCvInformationResponseToFullUserInformationResolver<TParent>;
  otherInformation?: GetFullCvInformationResponseToOtherInformationResolver<TParent>;
  educations?: GetFullCvInformationResponseToEducationsResolver<TParent>;
  workExperiences?: GetFullCvInformationResponseToWorkExperiencesResolver<TParent>;
  languages?: GetFullCvInformationResponseToLanguagesResolver<TParent>;
  userPresentation?: GetFullCvInformationResponseToUserPresentationResolver<TParent>;
}

export interface GetFullCvInformationResponseToFullUserInformationResolver<
  TParent = GQLGetFullCvInformationResponse,
  TResult = GQLFullUserInformationFullCv
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetFullCvInformationResponseToOtherInformationResolver<
  TParent = GQLGetFullCvInformationResponse,
  TResult = GQLOtherInformationFullCv
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetFullCvInformationResponseToEducationsResolver<
  TParent = GQLGetFullCvInformationResponse,
  TResult = Array<GQLEducationFullCv | null>
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetFullCvInformationResponseToWorkExperiencesResolver<
  TParent = GQLGetFullCvInformationResponse,
  TResult = Array<GQLWorkExperienceFullCv | null>
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetFullCvInformationResponseToLanguagesResolver<
  TParent = GQLGetFullCvInformationResponse,
  TResult = Array<GQLLanguageFullCv | null>
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetFullCvInformationResponseToUserPresentationResolver<
  TParent = GQLGetFullCvInformationResponse,
  TResult = GQLUserPresentationFullCv
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLFullUserInformationFullCvTypeResolver<
  TParent = GQLFullUserInformationFullCv
> {
  id?: FullUserInformationFullCvToIdResolver<TParent>;
  firstName?: FullUserInformationFullCvToFirstNameResolver<TParent>;
  lastName?: FullUserInformationFullCvToLastNameResolver<TParent>;
  phoneNumber?: FullUserInformationFullCvToPhoneNumberResolver<TParent>;
  emailCv?: FullUserInformationFullCvToEmailCvResolver<TParent>;
  citySv?: FullUserInformationFullCvToCitySvResolver<TParent>;
  cityEn?: FullUserInformationFullCvToCityEnResolver<TParent>;
  countrySv?: FullUserInformationFullCvToCountrySvResolver<TParent>;
  countryEn?: FullUserInformationFullCvToCountryEnResolver<TParent>;
  addressZipCode?: FullUserInformationFullCvToAddressZipCodeResolver<TParent>;
  profileImage?: FullUserInformationFullCvToProfileImageResolver<TParent>;
  workTitleSv?: FullUserInformationFullCvToWorkTitleSvResolver<TParent>;
  workTitleEn?: FullUserInformationFullCvToWorkTitleEnResolver<TParent>;
}

export interface FullUserInformationFullCvToIdResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToFirstNameResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToLastNameResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToPhoneNumberResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToEmailCvResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToCitySvResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToCityEnResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToCountrySvResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToCountryEnResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToAddressZipCodeResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToProfileImageResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToWorkTitleSvResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface FullUserInformationFullCvToWorkTitleEnResolver<
  TParent = GQLFullUserInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLOtherInformationFullCvTypeResolver<
  TParent = GQLOtherInformationFullCv
> {
  drivingLicenseSv?: OtherInformationFullCvToDrivingLicenseSvResolver<TParent>;
  drivingLicenseEn?: OtherInformationFullCvToDrivingLicenseEnResolver<TParent>;
}

export interface OtherInformationFullCvToDrivingLicenseSvResolver<
  TParent = GQLOtherInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface OtherInformationFullCvToDrivingLicenseEnResolver<
  TParent = GQLOtherInformationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLEducationFullCvTypeResolver<TParent = GQLEducationFullCv> {
  educationNameSv?: EducationFullCvToEducationNameSvResolver<TParent>;
  educationNameEn?: EducationFullCvToEducationNameEnResolver<TParent>;
  examNameSv?: EducationFullCvToExamNameSvResolver<TParent>;
  examNameEn?: EducationFullCvToExamNameEnResolver<TParent>;
  subjectAreaSv?: EducationFullCvToSubjectAreaSvResolver<TParent>;
  subjectAreaEn?: EducationFullCvToSubjectAreaEnResolver<TParent>;
  descriptionSv?: EducationFullCvToDescriptionSvResolver<TParent>;
  descriptionEn?: EducationFullCvToDescriptionEnResolver<TParent>;
  grade?: EducationFullCvToGradeResolver<TParent>;
  citySv?: EducationFullCvToCitySvResolver<TParent>;
  cityEn?: EducationFullCvToCityEnResolver<TParent>;
  countryEn?: EducationFullCvToCountryEnResolver<TParent>;
  countrySv?: EducationFullCvToCountrySvResolver<TParent>;
  dateStarted?: EducationFullCvToDateStartedResolver<TParent>;
  dateEnded?: EducationFullCvToDateEndedResolver<TParent>;
}

export interface EducationFullCvToEducationNameSvResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToEducationNameEnResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToExamNameSvResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToExamNameEnResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToSubjectAreaSvResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToSubjectAreaEnResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToDescriptionSvResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToDescriptionEnResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToGradeResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToCitySvResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToCityEnResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToCountryEnResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToCountrySvResolver<
  TParent = GQLEducationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToDateStartedResolver<
  TParent = GQLEducationFullCv,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationFullCvToDateEndedResolver<
  TParent = GQLEducationFullCv,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLWorkExperienceFullCvTypeResolver<
  TParent = GQLWorkExperienceFullCv
> {
  employmentRate?: WorkExperienceFullCvToEmploymentRateResolver<TParent>;
  companyName?: WorkExperienceFullCvToCompanyNameResolver<TParent>;
  roleSv?: WorkExperienceFullCvToRoleSvResolver<TParent>;
  roleEn?: WorkExperienceFullCvToRoleEnResolver<TParent>;
  descriptionSv?: WorkExperienceFullCvToDescriptionSvResolver<TParent>;
  descriptionEn?: WorkExperienceFullCvToDescriptionEnResolver<TParent>;
  citySv?: WorkExperienceFullCvToCitySvResolver<TParent>;
  cityEn?: WorkExperienceFullCvToCityEnResolver<TParent>;
  countrySv?: WorkExperienceFullCvToCountrySvResolver<TParent>;
  countryEn?: WorkExperienceFullCvToCountryEnResolver<TParent>;
  dateStarted?: WorkExperienceFullCvToDateStartedResolver<TParent>;
  dateEnded?: WorkExperienceFullCvToDateEndedResolver<TParent>;
}

export interface WorkExperienceFullCvToEmploymentRateResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToCompanyNameResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToRoleSvResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToRoleEnResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToDescriptionSvResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToDescriptionEnResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToCitySvResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToCityEnResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToCountrySvResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToCountryEnResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToDateStartedResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceFullCvToDateEndedResolver<
  TParent = GQLWorkExperienceFullCv,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLLanguageFullCvTypeResolver<TParent = GQLLanguageFullCv> {
  languageSv?: LanguageFullCvToLanguageSvResolver<TParent>;
  languageEn?: LanguageFullCvToLanguageEnResolver<TParent>;
}

export interface LanguageFullCvToLanguageSvResolver<
  TParent = GQLLanguageFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface LanguageFullCvToLanguageEnResolver<
  TParent = GQLLanguageFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserPresentationFullCvTypeResolver<
  TParent = GQLUserPresentationFullCv
> {
  presentationSv?: UserPresentationFullCvToPresentationSvResolver<TParent>;
  presentationEn?: UserPresentationFullCvToPresentationEnResolver<TParent>;
}

export interface UserPresentationFullCvToPresentationSvResolver<
  TParent = GQLUserPresentationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserPresentationFullCvToPresentationEnResolver<
  TParent = GQLUserPresentationFullCv,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCertificateRootTypeResolver<TParent = GQLCertificateRoot> {
  getCertificate?: CertificateRootToGetCertificateResolver<TParent>;
  getCertificates?: CertificateRootToGetCertificatesResolver<TParent>;
}

export interface CertificateRootToGetCertificateArgs {
  input: GQLGetCertificateInput;
}
export interface CertificateRootToGetCertificateResolver<
  TParent = GQLCertificateRoot,
  TResult = GQLCertificateResponse
> {
  (
    parent: TParent,
    args: CertificateRootToGetCertificateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateRootToGetCertificatesResolver<
  TParent = GQLCertificateRoot,
  TResult = GQLCertificatesResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCertificateResponseTypeResolver<
  TParent = GQLCertificateResponse
> {
  id?: CertificateResponseToIdResolver<TParent>;
  userId?: CertificateResponseToUserIdResolver<TParent>;
  certificateNameSv?: CertificateResponseToCertificateNameSvResolver<TParent>;
  certificateNameEn?: CertificateResponseToCertificateNameEnResolver<TParent>;
  organisation?: CertificateResponseToOrganisationResolver<TParent>;
  identificationId?: CertificateResponseToIdentificationIdResolver<TParent>;
  referenceAddress?: CertificateResponseToReferenceAddressResolver<TParent>;
  dateIssued?: CertificateResponseToDateIssuedResolver<TParent>;
  updatedAt?: CertificateResponseToUpdatedAtResolver<TParent>;
  createdAt?: CertificateResponseToCreatedAtResolver<TParent>;
  statusCode?: CertificateResponseToStatusCodeResolver<TParent>;
}

export interface CertificateResponseToIdResolver<
  TParent = GQLCertificateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateResponseToUserIdResolver<
  TParent = GQLCertificateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateResponseToCertificateNameSvResolver<
  TParent = GQLCertificateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateResponseToCertificateNameEnResolver<
  TParent = GQLCertificateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateResponseToOrganisationResolver<
  TParent = GQLCertificateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateResponseToIdentificationIdResolver<
  TParent = GQLCertificateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateResponseToReferenceAddressResolver<
  TParent = GQLCertificateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateResponseToDateIssuedResolver<
  TParent = GQLCertificateResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateResponseToUpdatedAtResolver<
  TParent = GQLCertificateResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateResponseToCreatedAtResolver<
  TParent = GQLCertificateResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateResponseToStatusCodeResolver<
  TParent = GQLCertificateResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCertificatesResponseTypeResolver<
  TParent = GQLCertificatesResponse
> {
  certificate?: CertificatesResponseToCertificateResolver<TParent>;
  statusCode?: CertificatesResponseToStatusCodeResolver<TParent>;
}

export interface CertificatesResponseToCertificateResolver<
  TParent = GQLCertificatesResponse,
  TResult = Array<GQLCertificate | null>
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificatesResponseToStatusCodeResolver<
  TParent = GQLCertificatesResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCertificateTypeResolver<TParent = GQLCertificate> {
  id?: CertificateToIdResolver<TParent>;
  userId?: CertificateToUserIdResolver<TParent>;
  certificateNameSv?: CertificateToCertificateNameSvResolver<TParent>;
  certificateNameEn?: CertificateToCertificateNameEnResolver<TParent>;
  organisation?: CertificateToOrganisationResolver<TParent>;
  identificationId?: CertificateToIdentificationIdResolver<TParent>;
  referenceAddress?: CertificateToReferenceAddressResolver<TParent>;
  dateIssued?: CertificateToDateIssuedResolver<TParent>;
  updatedAt?: CertificateToUpdatedAtResolver<TParent>;
  createdAt?: CertificateToCreatedAtResolver<TParent>;
}

export interface CertificateToIdResolver<
  TParent = GQLCertificate,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateToUserIdResolver<
  TParent = GQLCertificate,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateToCertificateNameSvResolver<
  TParent = GQLCertificate,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateToCertificateNameEnResolver<
  TParent = GQLCertificate,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateToOrganisationResolver<
  TParent = GQLCertificate,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateToIdentificationIdResolver<
  TParent = GQLCertificate,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateToReferenceAddressResolver<
  TParent = GQLCertificate,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateToDateIssuedResolver<
  TParent = GQLCertificate,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateToUpdatedAtResolver<
  TParent = GQLCertificate,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateToCreatedAtResolver<
  TParent = GQLCertificate,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLSkillRootTypeResolver<TParent = GQLSkillRoot> {
  getSkills?: SkillRootToGetSkillsResolver<TParent>;
}

export interface SkillRootToGetSkillsResolver<
  TParent = GQLSkillRoot,
  TResult = GQLGetSkillsResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetSkillsResponseTypeResolver<
  TParent = GQLGetSkillsResponse
> {
  statusCode?: GetSkillsResponseToStatusCodeResolver<TParent>;
  skills?: GetSkillsResponseToSkillsResolver<TParent>;
}

export interface GetSkillsResponseToStatusCodeResolver<
  TParent = GQLGetSkillsResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetSkillsResponseToSkillsResolver<
  TParent = GQLGetSkillsResponse,
  TResult = Array<GQLSkill | null>
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLSkillTypeResolver<TParent = GQLSkill> {
  id?: SkillToIdResolver<TParent>;
  skillName?: SkillToSkillNameResolver<TParent>;
}

export interface SkillToIdResolver<TParent = GQLSkill, TResult = string> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface SkillToSkillNameResolver<
  TParent = GQLSkill,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserSkillRootTypeResolver<TParent = GQLUserSkillRoot> {
  getUserSkills?: UserSkillRootToGetUserSkillsResolver<TParent>;
  getUserSkill?: UserSkillRootToGetUserSkillResolver<TParent>;
}

export interface UserSkillRootToGetUserSkillsResolver<
  TParent = GQLUserSkillRoot,
  TResult = GQLGetUserSkillsResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserSkillRootToGetUserSkillArgs {
  input?: GQLGetUserSkillInput;
}
export interface UserSkillRootToGetUserSkillResolver<
  TParent = GQLUserSkillRoot,
  TResult = GQLGetUserSkillResponse
> {
  (
    parent: TParent,
    args: UserSkillRootToGetUserSkillArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetUserSkillsResponseTypeResolver<
  TParent = GQLGetUserSkillsResponse
> {
  statusCode?: GetUserSkillsResponseToStatusCodeResolver<TParent>;
  userSkills?: GetUserSkillsResponseToUserSkillsResolver<TParent>;
}

export interface GetUserSkillsResponseToStatusCodeResolver<
  TParent = GQLGetUserSkillsResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetUserSkillsResponseToUserSkillsResolver<
  TParent = GQLGetUserSkillsResponse,
  TResult = Array<GQLUserSkill | null>
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserSkillTypeResolver<TParent = GQLUserSkill> {
  skill?: UserSkillToSkillResolver<TParent>;
  userSkill?: UserSkillToUserSkillResolver<TParent>;
}

export interface UserSkillToSkillResolver<
  TParent = GQLUserSkill,
  TResult = GQLSkillModel
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserSkillToUserSkillResolver<
  TParent = GQLUserSkill,
  TResult = GQLUserSkillModel
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLSkillModelTypeResolver<TParent = GQLSkillModel> {
  id?: SkillModelToIdResolver<TParent>;
  skillName?: SkillModelToSkillNameResolver<TParent>;
}

export interface SkillModelToIdResolver<
  TParent = GQLSkillModel,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface SkillModelToSkillNameResolver<
  TParent = GQLSkillModel,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserSkillModelTypeResolver<TParent = GQLUserSkillModel> {
  id?: UserSkillModelToIdResolver<TParent>;
  userId?: UserSkillModelToUserIdResolver<TParent>;
  skillId?: UserSkillModelToSkillIdResolver<TParent>;
  skillLevel?: UserSkillModelToSkillLevelResolver<TParent>;
}

export interface UserSkillModelToIdResolver<
  TParent = GQLUserSkillModel,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserSkillModelToUserIdResolver<
  TParent = GQLUserSkillModel,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserSkillModelToSkillIdResolver<
  TParent = GQLUserSkillModel,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserSkillModelToSkillLevelResolver<
  TParent = GQLUserSkillModel,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGetUserSkillResponseTypeResolver<
  TParent = GQLGetUserSkillResponse
> {
  statusCode?: GetUserSkillResponseToStatusCodeResolver<TParent>;
  userSkill?: GetUserSkillResponseToUserSkillResolver<TParent>;
}

export interface GetUserSkillResponseToStatusCodeResolver<
  TParent = GQLGetUserSkillResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GetUserSkillResponseToUserSkillResolver<
  TParent = GQLGetUserSkillResponse,
  TResult = GQLUserSkill | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLMutationTypeResolver<TParent = undefined> {
  authentication?: MutationToAuthenticationResolver<TParent>;
  userData?: MutationToUserDataResolver<TParent>;
  userPresentation?: MutationToUserPresentationResolver<TParent>;
  workExperience?: MutationToWorkExperienceResolver<TParent>;
  education?: MutationToEducationResolver<TParent>;
  otherInformation?: MutationToOtherInformationResolver<TParent>;
  language?: MutationToLanguageResolver<TParent>;
  certificate?: MutationToCertificateResolver<TParent>;
  skill?: MutationToSkillResolver<TParent>;
  userSkill?: MutationToUserSkillResolver<TParent>;
}

export interface MutationToAuthenticationResolver<
  TParent = undefined,
  TResult = GQLAuthenticationMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToUserDataResolver<
  TParent = undefined,
  TResult = GQLUserDataMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToUserPresentationResolver<
  TParent = undefined,
  TResult = GQLUserPresentationMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToWorkExperienceResolver<
  TParent = undefined,
  TResult = GQLWorkExperienceMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToEducationResolver<
  TParent = undefined,
  TResult = GQLEducationMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToOtherInformationResolver<
  TParent = undefined,
  TResult = GQLOtherInformationMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToLanguageResolver<
  TParent = undefined,
  TResult = GQLLanguageMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToCertificateResolver<
  TParent = undefined,
  TResult = GQLCertificateMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToSkillResolver<
  TParent = undefined,
  TResult = GQLSkillMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface MutationToUserSkillResolver<
  TParent = undefined,
  TResult = GQLUserSkillMutationRoot
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLAuthenticationMutationRootTypeResolver<
  TParent = GQLAuthenticationMutationRoot
> {
  refreshToken?: AuthenticationMutationRootToRefreshTokenResolver<TParent>;
  registerUser?: AuthenticationMutationRootToRegisterUserResolver<TParent>;
  loginUser?: AuthenticationMutationRootToLoginUserResolver<TParent>;
  logoutUser?: AuthenticationMutationRootToLogoutUserResolver<TParent>;
  changeEmail?: AuthenticationMutationRootToChangeEmailResolver<TParent>;
  changePassword?: AuthenticationMutationRootToChangePasswordResolver<TParent>;
  deleteAccount?: AuthenticationMutationRootToDeleteAccountResolver<TParent>;
  requestPasswordResetByEmail?: AuthenticationMutationRootToRequestPasswordResetByEmailResolver<TParent>;
  resetPasswordByToken?: AuthenticationMutationRootToResetPasswordByTokenResolver<TParent>;
}

export interface AuthenticationMutationRootToRefreshTokenArgs {
  input?: GQLRefreshTokenInput;
}
export interface AuthenticationMutationRootToRefreshTokenResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLTokenResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToRefreshTokenArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToRegisterUserArgs {
  input?: GQLRegisterInput;
}
export interface AuthenticationMutationRootToRegisterUserResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToRegisterUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToLoginUserArgs {
  input?: GQLLoginInput;
}
export interface AuthenticationMutationRootToLoginUserResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLTokenResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToLoginUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToLogoutUserResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToChangeEmailArgs {
  input?: GQLChangeEmailInput;
}
export interface AuthenticationMutationRootToChangeEmailResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToChangeEmailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToChangePasswordArgs {
  input?: GQLChangePasswordInput;
}
export interface AuthenticationMutationRootToChangePasswordResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToChangePasswordArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToDeleteAccountArgs {
  input?: GQLDeleteAccountInput;
}
export interface AuthenticationMutationRootToDeleteAccountResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToDeleteAccountArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToRequestPasswordResetByEmailArgs {
  input?: GQLRequestPasswordResetByEmailInput;
}
export interface AuthenticationMutationRootToRequestPasswordResetByEmailResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToRequestPasswordResetByEmailArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface AuthenticationMutationRootToResetPasswordByTokenArgs {
  input?: GQLResetPasswordByTokenInput;
}
export interface AuthenticationMutationRootToResetPasswordByTokenResolver<
  TParent = GQLAuthenticationMutationRoot,
  TResult = GQLGeneralResponse
> {
  (
    parent: TParent,
    args: AuthenticationMutationRootToResetPasswordByTokenArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLTokenResponseTypeResolver<TParent = GQLTokenResponse> {
  statusCode?: TokenResponseToStatusCodeResolver<TParent>;
  accessToken?: TokenResponseToAccessTokenResolver<TParent>;
  refreshToken?: TokenResponseToRefreshTokenResolver<TParent>;
}

export interface TokenResponseToStatusCodeResolver<
  TParent = GQLTokenResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface TokenResponseToAccessTokenResolver<
  TParent = GQLTokenResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface TokenResponseToRefreshTokenResolver<
  TParent = GQLTokenResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLGeneralResponseTypeResolver<TParent = GQLGeneralResponse> {
  statusCode?: GeneralResponseToStatusCodeResolver<TParent>;
  message?: GeneralResponseToMessageResolver<TParent>;
}

export interface GeneralResponseToStatusCodeResolver<
  TParent = GQLGeneralResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GeneralResponseToMessageResolver<
  TParent = GQLGeneralResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserDataMutationRootTypeResolver<
  TParent = GQLUserDataMutationRoot
> {
  updateUserData?: UserDataMutationRootToUpdateUserDataResolver<TParent>;
}

export interface UserDataMutationRootToUpdateUserDataArgs {
  input?: GQLUserDataInput;
}
export interface UserDataMutationRootToUpdateUserDataResolver<
  TParent = GQLUserDataMutationRoot,
  TResult = GQLUserUpdateResponse
> {
  (
    parent: TParent,
    args: UserDataMutationRootToUpdateUserDataArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserUpdateResponseTypeResolver<
  TParent = GQLUserUpdateResponse
> {
  id?: UserUpdateResponseToIdResolver<TParent>;
  userId?: UserUpdateResponseToUserIdResolver<TParent>;
  firstName?: UserUpdateResponseToFirstNameResolver<TParent>;
  lastName?: UserUpdateResponseToLastNameResolver<TParent>;
  phoneNumber?: UserUpdateResponseToPhoneNumberResolver<TParent>;
  emailCv?: UserUpdateResponseToEmailCvResolver<TParent>;
  citySv?: UserUpdateResponseToCitySvResolver<TParent>;
  cityEn?: UserUpdateResponseToCityEnResolver<TParent>;
  countrySv?: UserUpdateResponseToCountrySvResolver<TParent>;
  countryEn?: UserUpdateResponseToCountryEnResolver<TParent>;
  addressZipCode?: UserUpdateResponseToAddressZipCodeResolver<TParent>;
  profileImage?: UserUpdateResponseToProfileImageResolver<TParent>;
  profileImagePublicId?: UserUpdateResponseToProfileImagePublicIdResolver<TParent>;
  workTitleSv?: UserUpdateResponseToWorkTitleSvResolver<TParent>;
  workTitleEn?: UserUpdateResponseToWorkTitleEnResolver<TParent>;
  createdAt?: UserUpdateResponseToCreatedAtResolver<TParent>;
  updatedAt?: UserUpdateResponseToUpdatedAtResolver<TParent>;
  statusCode?: UserUpdateResponseToStatusCodeResolver<TParent>;
}

export interface UserUpdateResponseToIdResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToUserIdResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToFirstNameResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToLastNameResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToPhoneNumberResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToEmailCvResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToCitySvResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToCityEnResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToCountrySvResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToCountryEnResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToAddressZipCodeResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToProfileImageResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToProfileImagePublicIdResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToWorkTitleSvResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToWorkTitleEnResolver<
  TParent = GQLUserUpdateResponse,
  TResult = string | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToCreatedAtResolver<
  TParent = GQLUserUpdateResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToUpdatedAtResolver<
  TParent = GQLUserUpdateResponse,
  TResult = GQLDate
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UserUpdateResponseToStatusCodeResolver<
  TParent = GQLUserUpdateResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserPresentationMutationRootTypeResolver<
  TParent = GQLUserPresentationMutationRoot
> {
  updateUserPresentation?: UserPresentationMutationRootToUpdateUserPresentationResolver<TParent>;
}

export interface UserPresentationMutationRootToUpdateUserPresentationArgs {
  input?: GQLUserPresentationInput;
}
export interface UserPresentationMutationRootToUpdateUserPresentationResolver<
  TParent = GQLUserPresentationMutationRoot,
  TResult = GQLUserPresentationResponse
> {
  (
    parent: TParent,
    args: UserPresentationMutationRootToUpdateUserPresentationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLWorkExperienceMutationRootTypeResolver<
  TParent = GQLWorkExperienceMutationRoot
> {
  createWorkExperience?: WorkExperienceMutationRootToCreateWorkExperienceResolver<TParent>;
  updateWorkExperience?: WorkExperienceMutationRootToUpdateWorkExperienceResolver<TParent>;
  deleteWorkExperience?: WorkExperienceMutationRootToDeleteWorkExperienceResolver<TParent>;
}

export interface WorkExperienceMutationRootToCreateWorkExperienceArgs {
  input: GQLWorkExperienceInput;
}
export interface WorkExperienceMutationRootToCreateWorkExperienceResolver<
  TParent = GQLWorkExperienceMutationRoot,
  TResult = GQLCreateWorkExperienceResponse
> {
  (
    parent: TParent,
    args: WorkExperienceMutationRootToCreateWorkExperienceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceMutationRootToUpdateWorkExperienceArgs {
  input: GQLUpdateWorkExperienceInput;
}
export interface WorkExperienceMutationRootToUpdateWorkExperienceResolver<
  TParent = GQLWorkExperienceMutationRoot,
  TResult = GQLGetUpdateWorkExperienceResponse
> {
  (
    parent: TParent,
    args: WorkExperienceMutationRootToUpdateWorkExperienceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface WorkExperienceMutationRootToDeleteWorkExperienceArgs {
  input: GQLDeleteWorkExperienceInput;
}
export interface WorkExperienceMutationRootToDeleteWorkExperienceResolver<
  TParent = GQLWorkExperienceMutationRoot,
  TResult = GQLDeleteWorkExperienceResponse
> {
  (
    parent: TParent,
    args: WorkExperienceMutationRootToDeleteWorkExperienceArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCreateWorkExperienceResponseTypeResolver<
  TParent = GQLCreateWorkExperienceResponse
> {
  workExperienceId?: CreateWorkExperienceResponseToWorkExperienceIdResolver<TParent>;
  statusCode?: CreateWorkExperienceResponseToStatusCodeResolver<TParent>;
}

export interface CreateWorkExperienceResponseToWorkExperienceIdResolver<
  TParent = GQLCreateWorkExperienceResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CreateWorkExperienceResponseToStatusCodeResolver<
  TParent = GQLCreateWorkExperienceResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLDeleteWorkExperienceResponseTypeResolver<
  TParent = GQLDeleteWorkExperienceResponse
> {
  workExperienceId?: DeleteWorkExperienceResponseToWorkExperienceIdResolver<TParent>;
  statusCode?: DeleteWorkExperienceResponseToStatusCodeResolver<TParent>;
}

export interface DeleteWorkExperienceResponseToWorkExperienceIdResolver<
  TParent = GQLDeleteWorkExperienceResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface DeleteWorkExperienceResponseToStatusCodeResolver<
  TParent = GQLDeleteWorkExperienceResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLEducationMutationRootTypeResolver<
  TParent = GQLEducationMutationRoot
> {
  createEducation?: EducationMutationRootToCreateEducationResolver<TParent>;
  updateEducation?: EducationMutationRootToUpdateEducationResolver<TParent>;
  deleteEducation?: EducationMutationRootToDeleteEducationResolver<TParent>;
}

export interface EducationMutationRootToCreateEducationArgs {
  input: GQLCreateEducationInput;
}
export interface EducationMutationRootToCreateEducationResolver<
  TParent = GQLEducationMutationRoot,
  TResult = GQLCreateEducationResponse
> {
  (
    parent: TParent,
    args: EducationMutationRootToCreateEducationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationMutationRootToUpdateEducationArgs {
  input: GQLUpdateEducationInput;
}
export interface EducationMutationRootToUpdateEducationResolver<
  TParent = GQLEducationMutationRoot,
  TResult = GQLUpdateEducationResponse
> {
  (
    parent: TParent,
    args: EducationMutationRootToUpdateEducationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationMutationRootToDeleteEducationArgs {
  input: GQLDeleteEducationInput;
}
export interface EducationMutationRootToDeleteEducationResolver<
  TParent = GQLEducationMutationRoot,
  TResult = GQLDeleteEducationResponse
> {
  (
    parent: TParent,
    args: EducationMutationRootToDeleteEducationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCreateEducationResponseTypeResolver<
  TParent = GQLCreateEducationResponse
> {
  educationId?: CreateEducationResponseToEducationIdResolver<TParent>;
  statusCode?: CreateEducationResponseToStatusCodeResolver<TParent>;
}

export interface CreateEducationResponseToEducationIdResolver<
  TParent = GQLCreateEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CreateEducationResponseToStatusCodeResolver<
  TParent = GQLCreateEducationResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUpdateEducationResponseTypeResolver<
  TParent = GQLUpdateEducationResponse
> {
  statusCode?: UpdateEducationResponseToStatusCodeResolver<TParent>;
  education?: UpdateEducationResponseToEducationResolver<TParent>;
}

export interface UpdateEducationResponseToStatusCodeResolver<
  TParent = GQLUpdateEducationResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface UpdateEducationResponseToEducationResolver<
  TParent = GQLUpdateEducationResponse,
  TResult = GQLEducationResponse
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLEducationResponseTypeResolver<
  TParent = GQLEducationResponse
> {
  id?: EducationResponseToIdResolver<TParent>;
  userId?: EducationResponseToUserIdResolver<TParent>;
  educationNameSv?: EducationResponseToEducationNameSvResolver<TParent>;
  educationNameEn?: EducationResponseToEducationNameEnResolver<TParent>;
  examNameSv?: EducationResponseToExamNameSvResolver<TParent>;
  examNameEn?: EducationResponseToExamNameEnResolver<TParent>;
  subjectAreaSv?: EducationResponseToSubjectAreaSvResolver<TParent>;
  subjectAreaEn?: EducationResponseToSubjectAreaEnResolver<TParent>;
  descriptionSv?: EducationResponseToDescriptionSvResolver<TParent>;
  descriptionEn?: EducationResponseToDescriptionEnResolver<TParent>;
  grade?: EducationResponseToGradeResolver<TParent>;
  citySv?: EducationResponseToCitySvResolver<TParent>;
  cityEn?: EducationResponseToCityEnResolver<TParent>;
  countrySv?: EducationResponseToCountrySvResolver<TParent>;
  countryEn?: EducationResponseToCountryEnResolver<TParent>;
  dateStarted?: EducationResponseToDateStartedResolver<TParent>;
  dateEnded?: EducationResponseToDateEndedResolver<TParent>;
}

export interface EducationResponseToIdResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToUserIdResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToEducationNameSvResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToEducationNameEnResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToExamNameSvResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToExamNameEnResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToSubjectAreaSvResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToSubjectAreaEnResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToDescriptionSvResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToDescriptionEnResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToGradeResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToCitySvResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToCityEnResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToCountrySvResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToCountryEnResolver<
  TParent = GQLEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToDateStartedResolver<
  TParent = GQLEducationResponse,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface EducationResponseToDateEndedResolver<
  TParent = GQLEducationResponse,
  TResult = GQLDate | null
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLDeleteEducationResponseTypeResolver<
  TParent = GQLDeleteEducationResponse
> {
  educationId?: DeleteEducationResponseToEducationIdResolver<TParent>;
  statusCode?: DeleteEducationResponseToStatusCodeResolver<TParent>;
}

export interface DeleteEducationResponseToEducationIdResolver<
  TParent = GQLDeleteEducationResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface DeleteEducationResponseToStatusCodeResolver<
  TParent = GQLDeleteEducationResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLOtherInformationMutationRootTypeResolver<
  TParent = GQLOtherInformationMutationRoot
> {
  updateOtherInformation?: OtherInformationMutationRootToUpdateOtherInformationResolver<TParent>;
}

export interface OtherInformationMutationRootToUpdateOtherInformationArgs {
  input: GQLOtherInformationInput;
}
export interface OtherInformationMutationRootToUpdateOtherInformationResolver<
  TParent = GQLOtherInformationMutationRoot,
  TResult = GQLOtherInformationResponse
> {
  (
    parent: TParent,
    args: OtherInformationMutationRootToUpdateOtherInformationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLLanguageMutationRootTypeResolver<
  TParent = GQLLanguageMutationRoot
> {
  createLanguage?: LanguageMutationRootToCreateLanguageResolver<TParent>;
  updateLanguage?: LanguageMutationRootToUpdateLanguageResolver<TParent>;
  deleteLanguage?: LanguageMutationRootToDeleteLanguageResolver<TParent>;
}

export interface LanguageMutationRootToCreateLanguageArgs {
  input: GQLLanguageInput;
}
export interface LanguageMutationRootToCreateLanguageResolver<
  TParent = GQLLanguageMutationRoot,
  TResult = GQLLanguageIdResponse
> {
  (
    parent: TParent,
    args: LanguageMutationRootToCreateLanguageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface LanguageMutationRootToUpdateLanguageArgs {
  input: GQLUpdateLanguageInput;
}
export interface LanguageMutationRootToUpdateLanguageResolver<
  TParent = GQLLanguageMutationRoot,
  TResult = GQLLanguageIdResponse
> {
  (
    parent: TParent,
    args: LanguageMutationRootToUpdateLanguageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface LanguageMutationRootToDeleteLanguageArgs {
  input: GQLDeleteLanguageInput;
}
export interface LanguageMutationRootToDeleteLanguageResolver<
  TParent = GQLLanguageMutationRoot,
  TResult = GQLLanguageIdResponse
> {
  (
    parent: TParent,
    args: LanguageMutationRootToDeleteLanguageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLLanguageIdResponseTypeResolver<
  TParent = GQLLanguageIdResponse
> {
  languageId?: LanguageIdResponseToLanguageIdResolver<TParent>;
  statusCode?: LanguageIdResponseToStatusCodeResolver<TParent>;
}

export interface LanguageIdResponseToLanguageIdResolver<
  TParent = GQLLanguageIdResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface LanguageIdResponseToStatusCodeResolver<
  TParent = GQLLanguageIdResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCertificateMutationRootTypeResolver<
  TParent = GQLCertificateMutationRoot
> {
  createCertificate?: CertificateMutationRootToCreateCertificateResolver<TParent>;
  updateCertificate?: CertificateMutationRootToUpdateCertificateResolver<TParent>;
  deleteCertificate?: CertificateMutationRootToDeleteCertificateResolver<TParent>;
}

export interface CertificateMutationRootToCreateCertificateArgs {
  input: GQLCreateCertificateInput;
}
export interface CertificateMutationRootToCreateCertificateResolver<
  TParent = GQLCertificateMutationRoot,
  TResult = GQLCreateCertificateResponse
> {
  (
    parent: TParent,
    args: CertificateMutationRootToCreateCertificateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateMutationRootToUpdateCertificateArgs {
  input: GQLUpdateCertificateInput;
}
export interface CertificateMutationRootToUpdateCertificateResolver<
  TParent = GQLCertificateMutationRoot,
  TResult = GQLCertificateResponse
> {
  (
    parent: TParent,
    args: CertificateMutationRootToUpdateCertificateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CertificateMutationRootToDeleteCertificateArgs {
  input: GQLDeleteCertificateInput;
}
export interface CertificateMutationRootToDeleteCertificateResolver<
  TParent = GQLCertificateMutationRoot,
  TResult = GQLDeleteCertificateResponse
> {
  (
    parent: TParent,
    args: CertificateMutationRootToDeleteCertificateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCreateCertificateResponseTypeResolver<
  TParent = GQLCreateCertificateResponse
> {
  certificateId?: CreateCertificateResponseToCertificateIdResolver<TParent>;
  statusCode?: CreateCertificateResponseToStatusCodeResolver<TParent>;
}

export interface CreateCertificateResponseToCertificateIdResolver<
  TParent = GQLCreateCertificateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CreateCertificateResponseToStatusCodeResolver<
  TParent = GQLCreateCertificateResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLDeleteCertificateResponseTypeResolver<
  TParent = GQLDeleteCertificateResponse
> {
  message?: DeleteCertificateResponseToMessageResolver<TParent>;
  statusCode?: DeleteCertificateResponseToStatusCodeResolver<TParent>;
}

export interface DeleteCertificateResponseToMessageResolver<
  TParent = GQLDeleteCertificateResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface DeleteCertificateResponseToStatusCodeResolver<
  TParent = GQLDeleteCertificateResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLSkillMutationRootTypeResolver<
  TParent = GQLSkillMutationRoot
> {
  createSkill?: SkillMutationRootToCreateSkillResolver<TParent>;
  deleteSkill?: SkillMutationRootToDeleteSkillResolver<TParent>;
}

export interface SkillMutationRootToCreateSkillArgs {
  input: GQLCreateSkillInput;
}
export interface SkillMutationRootToCreateSkillResolver<
  TParent = GQLSkillMutationRoot,
  TResult = GQLCreateSkillResponse
> {
  (
    parent: TParent,
    args: SkillMutationRootToCreateSkillArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface SkillMutationRootToDeleteSkillArgs {
  input: GQLDeleteSkillInput;
}
export interface SkillMutationRootToDeleteSkillResolver<
  TParent = GQLSkillMutationRoot,
  TResult = GQLDeleteSkillResponse
> {
  (
    parent: TParent,
    args: SkillMutationRootToDeleteSkillArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCreateSkillResponseTypeResolver<
  TParent = GQLCreateSkillResponse
> {
  skillId?: CreateSkillResponseToSkillIdResolver<TParent>;
  statusCode?: CreateSkillResponseToStatusCodeResolver<TParent>;
}

export interface CreateSkillResponseToSkillIdResolver<
  TParent = GQLCreateSkillResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CreateSkillResponseToStatusCodeResolver<
  TParent = GQLCreateSkillResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLDeleteSkillResponseTypeResolver<
  TParent = GQLDeleteSkillResponse
> {
  message?: DeleteSkillResponseToMessageResolver<TParent>;
  statusCode?: DeleteSkillResponseToStatusCodeResolver<TParent>;
}

export interface DeleteSkillResponseToMessageResolver<
  TParent = GQLDeleteSkillResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface DeleteSkillResponseToStatusCodeResolver<
  TParent = GQLDeleteSkillResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLUserSkillMutationRootTypeResolver<
  TParent = GQLUserSkillMutationRoot
> {
  createUserSkill?: UserSkillMutationRootToCreateUserSkillResolver<TParent>;
}

export interface UserSkillMutationRootToCreateUserSkillArgs {
  input: GQLCreateUserSkillInput;
}
export interface UserSkillMutationRootToCreateUserSkillResolver<
  TParent = GQLUserSkillMutationRoot,
  TResult = GQLCreateUserSkillResponse
> {
  (
    parent: TParent,
    args: UserSkillMutationRootToCreateUserSkillArgs,
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface GQLCreateUserSkillResponseTypeResolver<
  TParent = GQLCreateUserSkillResponse
> {
  userSkillId?: CreateUserSkillResponseToUserSkillIdResolver<TParent>;
  statusCode?: CreateUserSkillResponseToStatusCodeResolver<TParent>;
}

export interface CreateUserSkillResponseToUserSkillIdResolver<
  TParent = GQLCreateUserSkillResponse,
  TResult = string
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}

export interface CreateUserSkillResponseToStatusCodeResolver<
  TParent = GQLCreateUserSkillResponse,
  TResult = number
> {
  (
    parent: TParent,
    args: {},
    context: any,
    info: GraphQLResolveInfo
  ): Promise<TResult>;
}
